<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bRPC – Docs</title>
    <link>https://brpc.incubator.apache.org/docs/</link>
    <description>Recent content in Docs on bRPC</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://brpc.incubator.apache.org/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: bRPC 1.1.0</title>
      <link>https://brpc.incubator.apache.org/docs/blogs/releases/1.1.0/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/blogs/releases/1.1.0/</guid>
      <description>
        
        
        &lt;h2 id=&#34;whats-changed&#34;&gt;What&amp;rsquo;s Changed&lt;/h2&gt;
&lt;p&gt;New features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support ipv6 and unix domain socket by @wwbmmm in #1560&lt;/li&gt;
&lt;li&gt;Support protobuf 3.19.x by @hcoona in #1679&lt;/li&gt;
&lt;li&gt;Support http protocol dump and replay by @guodongxiaren in #1503&lt;/li&gt;
&lt;li&gt;Support nshead protocol dump and replay by @wwbmmm in #1486&lt;/li&gt;
&lt;li&gt;Support parse proto-text format http request body by @hiberabyss in #1690&lt;/li&gt;
&lt;li&gt;Support deliver timeout from client to server for baidu_std protocol by @wwbmmm in #1472&lt;/li&gt;
&lt;li&gt;Support inherit span on bthread create by @wwbmmm in #1494&lt;/li&gt;
&lt;li&gt;Add rpc_replay BUILD file by @taoxu in #1677&lt;/li&gt;
&lt;li&gt;Add brpc server Start(PortRange, const ServerOptions*) by @serverglen in #1460&lt;/li&gt;
&lt;li&gt;Add FlatMap insert(const std::pair&amp;lt;key_type, mapped_type&amp;gt;&amp;amp; kv) by @serverglen in #1468&lt;/li&gt;
&lt;li&gt;Add server eps bvar @serverglen in #1483&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bugfix:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fix CheckHealth not set has_request_code bug by @serverglen in #1502&lt;/li&gt;
&lt;li&gt;Fix a bug that server will send unexpected data frame to client if there are errors occur during processing stream create request by @jenrryyou in #1516&lt;/li&gt;
&lt;li&gt;Fix LA selection runs too long by @KaneVV1 in #1567&lt;/li&gt;
&lt;li&gt;Fix HttpResponse error by @jl2005 in #1620&lt;/li&gt;
&lt;li&gt;Fix bvar status compile error by @zwkno1 in #1625&lt;/li&gt;
&lt;li&gt;Fix InputMessenger client side retry policy by @ehds in #1680&lt;/li&gt;
&lt;li&gt;Fix work_stealing_queue_unittest for ARM by @TKONIY in #1709&lt;/li&gt;
&lt;li&gt;Fix LatencyRecorder qps not accurate by @wwbmmm in #1708&lt;/li&gt;
&lt;li&gt;Fix compile error after gcc11 with &amp;ndash;std=c++20 by @hiberabyss in #1719&lt;/li&gt;
&lt;li&gt;Fix unstable UT link error by @wwbmmm in #1711&lt;/li&gt;
&lt;li&gt;Fix Thrift download url to avoid pr build failed by @yangzhg in #1725&lt;/li&gt;
&lt;li&gt;Remove grpc ParseH2Settings warning log by @yanjianglu in #1599&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other improvements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improve documents by @wwc7654321, @wwbmmm, @tanzhongyi003, @mahongweichina, @cdjingit, @dl239, @ehds&lt;/li&gt;
&lt;li&gt;Fix typos by @yangzhg, @egolearner, @PengyiPan, @Aaaaaaron, @ehds, @JiaoZiLang, @mapleFU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to all contributors for the 1.1.0 version!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: bRPC overview</title>
      <link>https://brpc.incubator.apache.org/docs/overview/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/overview/</guid>
      <description>
        
        
        &lt;h1 id=&#34;what-is-rpc&#34;&gt;What is RPC?&lt;/h1&gt;
&lt;p&gt;Most machines on internet communicate with each other via &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_protocol_suite&#34;&gt;TCP/IP&lt;/a&gt;. However, TCP/IP only guarantees reliable data transmissions. We need to abstract more to build services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is the format of data transmission? Different machines and networks may have different byte-orders, directly sending in-memory data is not suitable. Fields in the data are added, modified or removed gradually, how do newer services talk with older services?&lt;/li&gt;
&lt;li&gt;Can TCP connection be reused for multiple requests to reduce overhead? Can multiple requests be sent through one TCP connection simultaneously?&lt;/li&gt;
&lt;li&gt;How to talk with a cluster with many machines?&lt;/li&gt;
&lt;li&gt;What should I do when the connection is broken? What if the server does not respond?&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_procedure_call&#34;&gt;RPC&lt;/a&gt; addresses the above issues by abstracting network communications as &amp;ldquo;clients accessing functions on servers&amp;rdquo;: client sends a request to server, wait until server receives -&amp;gt; processes -&amp;gt; responds to the request, then do actions according to the result.
&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/rpc.png&#34; alt=&#34;rpc.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how the issues are solved.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RPC needs serialization which is done by &lt;a href=&#34;https://github.com/google/protobuf&#34;&gt;protobuf&lt;/a&gt; pretty well. Users fill requests in format of protobuf::Message, do RPC, and fetch results from responses in protobuf::Message. protobuf has good forward and backward compatibility for users to change fields and build services incrementally. For http services, &lt;a href=&#34;http://www.json.org/&#34;&gt;json&lt;/a&gt; is used for serialization extensively.&lt;/li&gt;
&lt;li&gt;Establishment and re-using of connections is transparent to users, but users can make choices like &lt;a href=&#34;../client/basics/#connection-type&#34;&gt;different connection types&lt;/a&gt;: short, pooled, single.&lt;/li&gt;
&lt;li&gt;Machines are discovered by a Naming Service, which can be implemented by &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain_Name_System&#34;&gt;DNS&lt;/a&gt;, &lt;a href=&#34;https://zookeeper.apache.org/&#34;&gt;ZooKeeper&lt;/a&gt; or &lt;a href=&#34;https://github.com/coreos/etcd&#34;&gt;etcd&lt;/a&gt;. Inside Baidu, we use BNS (Baidu Naming Service). brpc provides &lt;a href=&#34;../client/basics/#naming-service&#34;&gt;&amp;ldquo;list://&amp;rdquo; and &amp;ldquo;file://&amp;quot;&lt;/a&gt; as well. Users specify load balancing algorithms to choose one machine for each request from all machines, including: round-robin, randomized, &lt;a href=&#34;../rpc-in-depth/consistent-hashing/&#34;&gt;consistent-hashing&lt;/a&gt;(murmurhash3 or md5) and &lt;a href=&#34;../rpc-in-depth/locality-aware/&#34;&gt;locality-aware&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;RPC retries when the connection is broken. When server does not respond within the given time, client fails with a timeout error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;where-can-i-use-rpc&#34;&gt;Where can I use RPC?&lt;/h1&gt;
&lt;p&gt;Almost all network communications.&lt;/p&gt;
&lt;p&gt;RPC can&amp;rsquo;t do everything surely, otherwise we don&amp;rsquo;t need the layer of TCP/IP. But in most network communications, RPC meets requirements and isolates the underlying details.&lt;/p&gt;
&lt;p&gt;Common doubts on RPC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My data is binary and large, using protobuf will be slow. First, this is possibly a wrong feeling and you will have to test it and prove it with &lt;a href=&#34;../builtin-services/cpu_profiler/&#34;&gt;profilers&lt;/a&gt;. Second, many protocols support carrying binary data along with protobuf requests and bypass the serialization.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m sending streaming data which can&amp;rsquo;t be processed by RPC. Actually many protocols in RPC can handle streaming data, including &lt;a href=&#34;../client/access-httph2/#progressively-download&#34;&gt;ProgressiveReader in http&lt;/a&gt;, streams in h2, &lt;a href=&#34;../client/streaming-rpc/&#34;&gt;streaming rpc&lt;/a&gt;, and RTMP which is a specialized streaming protocol.&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t need replies. With some inductions, we know that in your scenario requests can be dropped at any stage because the client is always unaware of the situation. Are you really sure this is acceptable? Even if you don&amp;rsquo;t need the reply, we recommend sending back small-sized replies, which are unlikely to be performance bottlenecks and will probably provide valuable clues when debugging complex bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;what-is-brpcimagesdocslogopng&#34;&gt;What is &lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/logo.png&#34; alt=&#34;brpc&#34;&gt;?&lt;/h1&gt;
&lt;p&gt;An industrial-grade RPC framework used throughout &lt;a href=&#34;http://ir.baidu.com/phoenix.zhtml?c=188488&amp;amp;p=irol-irhome&#34;&gt;Baidu&lt;/a&gt;, with 1,000,000+ instances(not counting clients) and thousands kinds of services, called &amp;ldquo;&lt;strong&gt;baidu-rpc&lt;/strong&gt;&amp;rdquo; inside Baidu. Only C++ implementation is opensourced right now.&lt;/p&gt;
&lt;p&gt;You can use it to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build a server that can talk in multiple protocols (&lt;strong&gt;on same port&lt;/strong&gt;), or access all sorts of services
&lt;ul&gt;
&lt;li&gt;restful http/https, &lt;a href=&#34;https://http2.github.io/http2-spec&#34;&gt;h2&lt;/a&gt;/&lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt;. using http/h2 in brpc is much more friendly than &lt;a href=&#34;https://curl.haxx.se/libcurl/&#34;&gt;libcurl&lt;/a&gt;. Access protobuf-based protocols with HTTP/h2+json, probably from another language.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../client/access-redis/&#34;&gt;redis&lt;/a&gt; and &lt;a href=&#34;../client/access-memcached/&#34;&gt;memcached&lt;/a&gt;, thread-safe, more friendly and performant than the official clients&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/rtmp.h&#34;&gt;rtmp&lt;/a&gt;/&lt;a href=&#34;https://en.wikipedia.org/wiki/Flash_Video&#34;&gt;flv&lt;/a&gt;/&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_Live_Streaming&#34;&gt;hls&lt;/a&gt;, for building &lt;a href=&#34;https://github.com/brpc/media-server&#34;&gt;streaming services&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;hadoop_rpc (may be opensourced)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_direct_memory_access&#34;&gt;rdma&lt;/a&gt; support (will be opensourced)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../client/access-thrift/&#34;&gt;thrift&lt;/a&gt; support,  thread-safe, more friendly and performant than the official clients.&lt;/li&gt;
&lt;li&gt;all sorts of protocols used in Baidu: &lt;a href=&#34;https://github.com/apache/incubator-brpc/blob/master/docs/cn/baidu_std.md&#34;&gt;baidu_std&lt;/a&gt;, &lt;a href=&#34;../client/streaming-rpc/&#34;&gt;streaming_rpc&lt;/a&gt;, hulu_pbrpc, &lt;a href=&#34;https://github.com/baidu/sofa-pbrpc&#34;&gt;sofa_pbrpc&lt;/a&gt;, nova_pbrpc, public_pbrpc, ubrpc, and nshead-based ones.&lt;/li&gt;
&lt;li&gt;Build &lt;a href=&#34;https://en.wikipedia.org/wiki/High_availability&#34;&gt;HA&lt;/a&gt; distributed services using an industrial-grade implementation of &lt;a href=&#34;https://raft.github.io&#34;&gt;RAFT consensus algorithm&lt;/a&gt; which is opensourced at &lt;a href=&#34;https://github.com/brpc/braft&#34;&gt;braft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Servers can handle requests &lt;a href=&#34;../server/basics/&#34;&gt;synchronously&lt;/a&gt; or &lt;a href=&#34;../server/basics/#asynchronous-service&#34;&gt;asynchronously&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Clients can access servers &lt;a href=&#34;../client/basics/#synchronus-call&#34;&gt;synchronously&lt;/a&gt;, &lt;a href=&#34;../client/basics/#asynchronous-call&#34;&gt;asynchronously&lt;/a&gt;, &lt;a href=&#34;../client/basics/#semi-synchronous-call&#34;&gt;semi-synchronously&lt;/a&gt;, or use &lt;a href=&#34;../client/combo-channels/&#34;&gt;combo channels&lt;/a&gt; to simplify sharded or parallel accesses declaratively.&lt;/li&gt;
&lt;li&gt;Debug services &lt;a href=&#34;../builtin-services/buildin_services/&#34;&gt;via http&lt;/a&gt;, and run &lt;a href=&#34;../builtin-services/cpu_profiler/&#34;&gt;cpu&lt;/a&gt;, &lt;a href=&#34;../builtin-services/heap_profiler/&#34;&gt;heap&lt;/a&gt; and &lt;a href=&#34;../builtin-services/contention_profiler/&#34;&gt;contention&lt;/a&gt; profilers.&lt;/li&gt;
&lt;li&gt;Get &lt;a href=&#34;#better-latency-and-throughput&#34;&gt;better latency and throughput&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../rpc-in-depth/new-protocol/&#34;&gt;Extend brpc&lt;/a&gt; with the protocols used in your organization quickly, or customize components, including &lt;a href=&#34;../rpc-in-depth/load-balancing/#%E5%91%BD%E5%90%8D%E6%9C%8D%E5%8A%A1&#34;&gt;naming services&lt;/a&gt; (dns, zk, etcd), &lt;a href=&#34;../rpc-in-depth/load-balancing/#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1&#34;&gt;load balancers&lt;/a&gt; (rr, random, consistent hashing)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;advantages-of-brpc&#34;&gt;Advantages of bRPC&lt;/h1&gt;
&lt;h3 id=&#34;more-friendly-api&#34;&gt;More friendly API&lt;/h3&gt;
&lt;p&gt;Only 3 (major) user headers: &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/server.h&#34;&gt;Server&lt;/a&gt;, &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/channel.h&#34;&gt;Channel&lt;/a&gt;, &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/controller.h&#34;&gt;Controller&lt;/a&gt;, corresponding to server-side, client-side and parameter-set respectively. You don&amp;rsquo;t have to worry about &amp;ldquo;How to initialize XXXManager&amp;rdquo;, &amp;ldquo;How to layer all these components together&amp;rdquo;,  &amp;ldquo;What&amp;rsquo;s the relationship between XXXController and XXXContext&amp;rdquo;. All you need to do is simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Build service? include &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/server.h&#34;&gt;brpc/server.h&lt;/a&gt; and follow the comments or &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/example/echo_c++/server.cpp&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access service? include &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/channel.h&#34;&gt;brpc/channel.h&lt;/a&gt; and follow the comments or &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/example/echo_c++/client.cpp&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tweak parameters? Checkout &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/controller.h&#34;&gt;brpc/controller.h&lt;/a&gt;. Note that the class is shared by server and channel. Methods are separated into 3 parts: client-side, server-side and both-side.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We tried to make simple things simple. Take naming service as an example. In older RPC implementations you may need to copy a pile of obscure code to make it work, however, in brpc accessing BNS is expressed as &lt;code&gt;Init(&amp;quot;bns://node-name&amp;quot;, ...)&lt;/code&gt;, DNS is &lt;code&gt;Init(&amp;quot;http://domain-name&amp;quot;, ...)&lt;/code&gt; and local machine list is &lt;code&gt;Init(&amp;quot;file:///home/work/server.list&amp;quot;, ...)&lt;/code&gt;. Without any explanation, you know what it means.&lt;/p&gt;
&lt;h3 id=&#34;make-services-more-reliable&#34;&gt;Make services more reliable&lt;/h3&gt;
&lt;p&gt;brpc is extensively used in Baidu:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map-reduce service &amp;amp; table storages&lt;/li&gt;
&lt;li&gt;high-performance computing &amp;amp; model training&lt;/li&gt;
&lt;li&gt;all sorts of indexing &amp;amp; ranking servers&lt;/li&gt;
&lt;li&gt;….&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s been proven.&lt;/p&gt;
&lt;p&gt;brpc pays special attentions to development and maintenance efficency, you can &lt;a href=&#34;../builtin-services/buildin_services/&#34;&gt;view internal status of servers&lt;/a&gt; in web browser or with curl, analyze &lt;a href=&#34;../builtin-services/cpu_profiler/&#34;&gt;cpu hotspots&lt;/a&gt;, &lt;a href=&#34;../builtin-services/heap_profiler/&#34;&gt;heap allocations&lt;/a&gt; and &lt;a href=&#34;../builtin-services/contention_profiler/&#34;&gt;lock contentions&lt;/a&gt; of online services, measure stats by &lt;a href=&#34;../bvar/bvar/&#34;&gt;bvar&lt;/a&gt; which is viewable in &lt;a href=&#34;../builtin-services/vars/&#34;&gt;/vars&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;better-latency-and-throughput&#34;&gt;Better latency and throughput&lt;/h3&gt;
&lt;p&gt;Although almost all RPC implementations claim that they&amp;rsquo;re &amp;ldquo;high-performant&amp;rdquo;, the numbers are probably just numbers. Being really high-performant in different scenarios is difficult. To unify communication infra inside Baidu, brpc goes much deeper at performance than other implementations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reading and parsing requests from different clients is fully parallelized and users don&amp;rsquo;t need to distinguish between &amp;ldquo;IO-threads&amp;rdquo; and &amp;ldquo;Processing-threads&amp;rdquo;. Other implementations probably have &amp;ldquo;IO-threads&amp;rdquo; and &amp;ldquo;Processing-threads&amp;rdquo; and hash file descriptors(fd) into IO-threads. When a IO-thread handles one of its fds, other fds in the thread can&amp;rsquo;t be handled. If a message is large, other fds are significantly delayed. Although different IO-threads run in parallel, you won&amp;rsquo;t have many IO-threads since they don&amp;rsquo;t have too much to do generally except reading/parsing from fds. If you have 10 IO-threads, one fd may affect 10% of all fds, which is unacceptable to industrial online services (requiring 99.99% availability). The problem will be worse when fds are distributed unevenly accross IO-threads (unfortunately common), or the service is multi-tenancy (common in cloud services). In brpc, reading from different fds is parallelized and even processing different messages from one fd is parallelized as well. Parsing a large message does not block other messages from the same fd, not to mention other fds. More details can be found &lt;a href=&#34;../rpc-in-depth/io/#receiving-messages&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Writing into one fd and multiple fds is highly concurrent. When multiple threads write into the same fd (common for multiplexed connections), the first thread directly writes in-place and other threads submit their write requests in &lt;a href=&#34;https://en.wikipedia.org/wiki/Non-blocking_algorithm#Wait-freedom&#34;&gt;wait-free&lt;/a&gt; manner. One fd can be written into 5,000,000 16-byte messages per second by a couple of highly-contended threads. More details can be found &lt;a href=&#34;../rpc-in-depth/io/#sending-messages&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Minimal locks. High-QPS services can utilize all CPU power on the machine. For example, &lt;a href=&#34;../rpc-in-depth/memory-management/&#34;&gt;creating bthreads&lt;/a&gt; for processing requests, &lt;a href=&#34;../rpc-in-depth/timer-keeping/&#34;&gt;setting up timeout&lt;/a&gt;, &lt;a href=&#34;../rpc-in-depth/bthread_id/&#34;&gt;finding RPC contexts&lt;/a&gt; according to response, &lt;a href=&#34;../bvar/bvar/&#34;&gt;recording performance counters&lt;/a&gt; are all highly concurrent. Users see very few contentions (via &lt;a href=&#34;../builtin-services/contention_profiler/&#34;&gt;contention profiler&lt;/a&gt;) caused by RPC framework even if the service runs at 500,000+ QPS.&lt;/li&gt;
&lt;li&gt;Server adjusts thread number according to load. Traditional implementations set number of threads according to latency to avoid limiting the throughput. brpc creates a new &lt;a href=&#34;../bthread/bthread/&#34;&gt;bthread&lt;/a&gt; for each request and ends the bthread when the request is done, which automatically adjusts thread number according to load.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check &lt;a href=&#34;../benchmark/&#34;&gt;benchmark&lt;/a&gt; for a comparison between brpc and other implementations.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Community</title>
      <link>https://brpc.incubator.apache.org/docs/community/community/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/community/community/</guid>
      <description>
        
        
        &lt;!--
{% comment %}
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the &#34;License&#34;); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
{% endcomment %}
--&gt;
&lt;h2 id=&#34;apache-brpc-incubating-community&#34;&gt;Apache brpc (incubating) Community&lt;/h2&gt;
&lt;p&gt;Every volunteer project obtains its strength from the people involved in it. We invite you to participate as much or as little as you choose.&lt;/p&gt;
&lt;p&gt;You can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use our project and provide a feedback.&lt;/li&gt;
&lt;li&gt;Provide us with the use-cases.&lt;/li&gt;
&lt;li&gt;Report bugs and submit patches.&lt;/li&gt;
&lt;li&gt;Contribute code, testcase, documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Visit the [Contributing] page for more information.&lt;/p&gt;
&lt;h3 id=&#34;mailing-list&#34;&gt;Mailing list&lt;/h3&gt;
&lt;p&gt;Get help using bRPC or contribute to the project on our mailing lists:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;dev@brpc.apache.org&#34;&gt;dev@brpc.apache.org&lt;/a&gt; is for people who want to contribute code to bRPC. &lt;a href=&#34;mailto:dev-subscribe@brpc.apache.org?subject=send%20this%20email%20to%20subscribe&#34;&gt;subscribe&lt;/a&gt;, &lt;a href=&#34;mailto:dev-unsubscribe@brpc.apache.org?subject=send%20this%20email%20to%20unsubscribe&#34;&gt;unsubscribe&lt;/a&gt;, &lt;a href=&#34;https://www.mail-archive.com/dev@brpc.apache.org/&#34;&gt;archives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;commits@brpc.apache.org&#34;&gt;commits@brpc.apache.org&lt;/a&gt; is for commit messages and patches to bRPC. &lt;a href=&#34;mailto:commits-subscribe@brpc.apache.org?subject=send%20this%20email%20to%20subscribe&#34;&gt;subscribe&lt;/a&gt;, &lt;a href=&#34;mailto:commits-unsubscribe@brpc.apache.org?subject=send%20this%20email%20to%20unsubscribe&#34;&gt;unsubscribe&lt;/a&gt;, &lt;a href=&#34;https://www.mail-archive.com/commits@brpc.apache.org/&#34;&gt;archives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;issue-tracker&#34;&gt;Issue tracker&lt;/h3&gt;
&lt;h4 id=&#34;bug-reports&#34;&gt;Bug Reports&lt;/h4&gt;
&lt;p&gt;Found bug? Enter an issue in the &lt;a href=&#34;https://github.com/apache/incubator-brpc/issues&#34;&gt;Issue Tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before submitting an issue, please:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verify that the bug does in fact exist.&lt;/li&gt;
&lt;li&gt;Search the issue tracker to verify there is no existing issue reporting the bug you&amp;rsquo;ve found.&lt;/li&gt;
&lt;li&gt;Consider tracking down the bug yourself in the bRPC&amp;rsquo;s source and submitting a patch along with your bug report. This is a great time saver for the bRPC developers and helps ensure the bug will be fixed quickly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;feature-requests&#34;&gt;Feature Requests&lt;/h4&gt;
&lt;p&gt;Enhancement requests for new features are also welcome. The more concrete and rationale the request is, the greater the chance it will incorporated into future releases.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/apache/incubator-brpc/issues&#34;&gt;https://github.com/apache/incubator-brpc/issues&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;source-code&#34;&gt;Source Code&lt;/h3&gt;
&lt;p&gt;The project sources are accessible via the &lt;a href=&#34;https://github.com/apache/incubator-brpc&#34;&gt;source code repository&lt;/a&gt; which is on github.&lt;/p&gt;
&lt;h3 id=&#34;website-source-code&#34;&gt;Website Source Code&lt;/h3&gt;
&lt;p&gt;The project website sources are accessible via the &lt;a href=&#34;https://github.com/apache/incubator-brpc-website&#34;&gt;website source code repository&lt;/a&gt; which is on github also.&lt;/p&gt;
&lt;h3 id=&#34;brpc-team-members&#34;&gt;bRPC Team Members&lt;/h3&gt;
&lt;table class=&#34;table table-hover&#34;&gt;
    &lt;tr&gt;
        &lt;th&gt;&lt;b&gt;Photo&lt;/b&gt;&lt;/th&gt;
        &lt;th&gt;&lt;b&gt;Full Name&lt;/b&gt;&lt;/th&gt;
        &lt;th&gt;&lt;b&gt;Apache ID&lt;/b&gt;&lt;/th&gt;
        &lt;th&gt;&lt;b&gt;GitHub&lt;/b&gt;&lt;/th&gt;
        &lt;th&gt;&lt;b&gt;Role&lt;/b&gt;&lt;/th&gt;
        &lt;th&gt;&lt;b&gt;Affiliation&lt;/b&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/jamesge&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/6566535?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;James Ge&lt;/td&gt;
        &lt;td&gt;jamesge&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/jamesge&#34;&gt;jamesge&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;PPMC&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/zyearn&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/4475779?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Jiashun Zhu&lt;/td&gt;
        &lt;td&gt;jiashunzhu&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/zyearn&#34;&gt;zyearn&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;PPMC&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/chenzhangyi&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/6805583?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Zhangyi Chen&lt;/td&gt;
        &lt;td&gt;zychen&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/chenzhangyi&#34;&gt;chenzhangyi&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;PPMC&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/old-bear&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/1525532?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Bear Jiang&lt;/td&gt;
        &lt;td&gt;jrjbear&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/old-bear&#34;&gt;old-bear&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;PPMC&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/ipconfigme&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/2500750?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Yao Wang&lt;/td&gt;
        &lt;td&gt;fisherman&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/ipconfigme&#34;&gt;ipconfigme&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;PPMC&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/tanzhongyi003&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/20179982?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Jerry Tan&lt;/td&gt;
        &lt;td&gt;jerrytan&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/tanzhongyi003&#34;&gt;tanzhongyi003&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;PPMC&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/wwbmmm&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/3894631?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Wang Weibing&lt;/td&gt;
        &lt;td&gt;wwbmmm&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/wwbmmm&#34;&gt;wwbmmm&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;PPMC&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/TousakaRin&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/8801314?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;He Lei&lt;/td&gt;
        &lt;td&gt;leander&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/TousakaRin&#34;&gt;TousakaRin&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;PPMC&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/cdjingit&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/31362185?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Cai Daojin&lt;/td&gt;
        &lt;td&gt;caidj&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/cdjingit&#34;&gt;cdjingit&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;PPMC&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/lorinlee&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/16054841?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Lorin Lee&lt;/td&gt;
        &lt;td&gt;lorinlee&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/lorinlee&#34;&gt;lorinlee&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;PPMC&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/gydong&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/3294444?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Mou Gaidong&lt;/td&gt;
        &lt;td&gt;gydong&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/gydong&#34;&gt;gydong&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Committer&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/guodongxiaren&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/5945107?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Wang wei&lt;/td&gt;
        &lt;td&gt;guodong&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/guodongxiaren&#34;&gt;guodongxiaren&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Committer&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/serverglen&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/38067377?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Shuai Liu&lt;/td&gt;
        &lt;td&gt;serverglen&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/serverglen&#34;&gt;serverglen&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Committer&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/wasphin&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/1237906?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Wang Xiaofeng&lt;/td&gt;
        &lt;td&gt;xiaofeng&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/wasphin&#34;&gt;wasphin&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Committer&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/Huixxi&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://avatars.githubusercontent.com/u/21335093?v=4&#34;&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Xiguo Hu&lt;/td&gt;
        &lt;td&gt;huixxi&lt;/td&gt;
        &lt;td&gt;&lt;a href=&#34;http://github.com/Huixxi&#34;&gt;Huixxi&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Committer&lt;/td&gt;
        &lt;td&gt;apache&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: bRPC 1.0.0</title>
      <link>https://brpc.incubator.apache.org/docs/blogs/releases/1.0.0/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/blogs/releases/1.0.0/</guid>
      <description>
        
        
        &lt;h2 id=&#34;whats-changed&#34;&gt;What&amp;rsquo;s Changed&lt;/h2&gt;
&lt;p&gt;New features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fix grpc ut by @zyearn in #1036&lt;/li&gt;
&lt;li&gt;replace_include_with_find_package by @zyearn in #1032&lt;/li&gt;
&lt;li&gt;ignore ELIMIT for circuit breaker by @TousakaRin in #1005&lt;/li&gt;
&lt;li&gt;limit minimum value of max_concurrency for auto_cl by @TousakaRin in #1003&lt;/li&gt;
&lt;li&gt;Add missing &amp;lsquo;`&amp;rsquo; by @lingbin in #1053&lt;/li&gt;
&lt;li&gt;fix heap overflow in simple_data_pool by @yockie in #1056&lt;/li&gt;
&lt;li&gt;fix redis args by @liumh8 in #1128&lt;/li&gt;
&lt;li&gt;timer_thread: remove redundant code by @lorinlee in #1137&lt;/li&gt;
&lt;li&gt;Update nshead_service.md by @pklim101 in #1151&lt;/li&gt;
&lt;li&gt;fix_share_tls_block by @zyearn in #1156&lt;/li&gt;
&lt;li&gt;(FIX COMMENT)butil: remove BasicStringPiece in comments by @mapleFU in #1172&lt;/li&gt;
&lt;li&gt;fix h2_req check failed when retry after ELIMIT error by @heyuyi0906 in #1161&lt;/li&gt;
&lt;li&gt;fix brpc.baidu.com not accessible by @zyearn in #1189&lt;/li&gt;
&lt;li&gt;add .asf.yaml to set github about info by @tanzhongyi003 in #1222&lt;/li&gt;
&lt;li&gt;update .asf.yaml to change RPC into lowercase by @tanzhongyi003 in #1224&lt;/li&gt;
&lt;li&gt;add option to allow access methods from default url by @wasphin in #1214&lt;/li&gt;
&lt;li&gt;For https naming service, use 443 as default port by @TousakaRin in #1139&lt;/li&gt;
&lt;li&gt;update StreamOptions by @cstarc in #1247&lt;/li&gt;
&lt;li&gt;Fix build break for clang 10.0.1 by @thanksunix in #1261&lt;/li&gt;
&lt;li&gt;coding style fix in brpc/trackme.cpp by @gydong in #1270&lt;/li&gt;
&lt;li&gt;Compatibility improvement of protobuf json format and spring http spec by @chenzhangyi in #1292&lt;/li&gt;
&lt;li&gt;Fix bazel build in macos by @chenzhangyi in #1298&lt;/li&gt;
&lt;li&gt;make butil::BasicStringPiece support string split functions-family by @lrita in #1295&lt;/li&gt;
&lt;li&gt;make butil::ScopedVector support std::initializer_list by @lrita in #1291&lt;/li&gt;
&lt;li&gt;Update docs by @serverglen in #1258&lt;/li&gt;
&lt;li&gt;Add rpm packaging spec by @wasphin in #1290&lt;/li&gt;
&lt;li&gt;Fix the compile error when using GCC compiler with asan enabled on Linux platform. by @warriorpaw in #1289&lt;/li&gt;
&lt;li&gt;Fix registering multiple addresses to discovery by @wasphin in #1320&lt;/li&gt;
&lt;li&gt;Fix rpm spec by @wasphin in #1324&lt;/li&gt;
&lt;li&gt;Remove FlameGraph dependency by @zyearn in #1345&lt;/li&gt;
&lt;li&gt;Fix build failure on macOS with FlameGraph by @gogdizzy in #1411&lt;/li&gt;
&lt;li&gt;status文档中的代码示例写错了，需要实现的函数名应为Describe by @guodongxiaren in #1413&lt;/li&gt;
&lt;li&gt;Update bvar.md by @codroc in #1414&lt;/li&gt;
&lt;li&gt;修改la策略中的异常日志的级别，避免在使用glog的情况下core dump by @guodongxiaren in #1415&lt;/li&gt;
&lt;li&gt;Change chinese quotation marks in bvar_c++.md sample code by @tbago in #1396&lt;/li&gt;
&lt;li&gt;SampleRequest写错了应为SampledRequest by @guodongxiaren in #1420&lt;/li&gt;
&lt;li&gt;修复rpc_replay中ChannelGroup初始化时resize的bug by @guodongxiaren in #1422&lt;/li&gt;
&lt;li&gt;fix warning in gcc8+ by @stdpain in #1381&lt;/li&gt;
&lt;li&gt;文档修复：BRPC_RPC_VALIDATE_GFLAG改为BRPC_VALIDATE_GFLAG by @guodongxiaren in #1426&lt;/li&gt;
&lt;li&gt;消除高版本GCC上编译时大量-Wclass-memaccess的警告 by @guodongxiaren in #1427&lt;/li&gt;
&lt;li&gt;rm DISCLAIMER-WIP and use DISCLAIMER for 1.0 release by @tanzhongyi003 in #1432&lt;/li&gt;
&lt;li&gt;Update flat_map.h by @yanjianglu in #1352&lt;/li&gt;
&lt;li&gt;add flag BTHREAD_NEVER_QUIT by @ustccy in #1193&lt;/li&gt;
&lt;li&gt;implement weighted randomized load balancer #1254 by @serverglen in #1314&lt;/li&gt;
&lt;li&gt;rpc_view support setting timeout by @serverglen in #1459&lt;/li&gt;
&lt;li&gt;Fix baidu_rpc_protocol.cpp a variable incorrectly named by @serverglen in #1451&lt;/li&gt;
&lt;li&gt;Fix Socket::WaitAndReset memory leak by @wwbmmm in #1456&lt;/li&gt;
&lt;li&gt;docs: fix server_push.md by @lorinlee in #1463&lt;/li&gt;
&lt;li&gt;Add gitignore for files generated during test by @wwbmmm in #1473&lt;/li&gt;
&lt;li&gt;docs: fix broken link in CONTRIBUTING.md by @lorinlee in #1481&lt;/li&gt;
&lt;li&gt;Add FlatMap example code by @serverglen in #1484&lt;/li&gt;
&lt;li&gt;Fix apache thrift download failed by @wwbmmm in #1495&lt;/li&gt;
&lt;li&gt;Fix http client doc by @wwbmmm in #1493&lt;/li&gt;
&lt;li&gt;Add DomainListNamingService which resolves services from the given list periodically by @chenzhangyi in #1509&lt;/li&gt;
&lt;li&gt;check is valid character in uri by @guodongxiaren in #1506&lt;/li&gt;
&lt;li&gt;emplace/emplace_back replace insert/push_back for pair by @guodongxiaren in #1504&lt;/li&gt;
&lt;li&gt;Update gdb_bthread_stack.py by @tanzhongyi003 in #1521&lt;/li&gt;
&lt;li&gt;Update get_brpc_revision.sh by @tanzhongyi003 in #1520&lt;/li&gt;
&lt;li&gt;Tanslate getting_started.md into Chinese by @guodongxiaren in #1515&lt;/li&gt;
&lt;li&gt;Update NOTICE by @tanzhongyi003 in #1519&lt;/li&gt;
&lt;li&gt;add missing notice for tools/pprof, test/crc32c_unittest.cc by @tanzhongyi003 in #1522&lt;/li&gt;
&lt;li&gt;docs: fix centos compile options by @lorinlee in #1525&lt;/li&gt;
&lt;li&gt;Add rtmp/FlvWriterOptions to support writing audio/video content only by @v1siuol in #1505&lt;/li&gt;
&lt;li&gt;upgrade baseimage to 20.04 by @tanzhongyi003 in #1531&lt;/li&gt;
&lt;li&gt;release 1.0.0-rc02 by @lorinlee in #1538&lt;/li&gt;
&lt;li&gt;Fix tools/get_brpc_revision.sh by @v1siuol in #1536&lt;/li&gt;
&lt;li&gt;update docs by @serverglen in #1499&lt;/li&gt;
&lt;li&gt;Set hostname rather than ip when channel Init by hostname but not host in http_requst().uri() by @guodongxiaren in #1529&lt;/li&gt;
&lt;li&gt;add cases.md by @tanzhongyi003 in #1551&lt;/li&gt;
&lt;li&gt;Add use case of Baidu by @wwbmmm in #1557&lt;/li&gt;
&lt;li&gt;docs(circuit_breaker): add ema wiki link by @JiaoZiLang in #1575&lt;/li&gt;
&lt;li&gt;Add Case by @guodongxiaren in #1576&lt;/li&gt;
&lt;li&gt;community: add release doc by @lorinlee in #1582&lt;/li&gt;
&lt;li&gt;Update release_cn.md by @tanzhongyi003 in #1588&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to all contributors for the 1.0.0 version!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Getting started</title>
      <link>https://brpc.incubator.apache.org/docs/getting_started/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/getting_started/</guid>
      <description>
        
        
        &lt;h1 id=&#34;build&#34;&gt;BUILD&lt;/h1&gt;
&lt;p&gt;brpc prefers static linkages of deps, so that they don&amp;rsquo;t have to be installed on every machine running the app.&lt;/p&gt;
&lt;p&gt;brpc depends on following packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gflags/gflags&#34;&gt;gflags&lt;/a&gt;: Extensively used to define global options.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/protobuf&#34;&gt;protobuf&lt;/a&gt;: Serializations of messages, interfaces of services.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/leveldb&#34;&gt;leveldb&lt;/a&gt;: Required by &lt;a href=&#34;../builtin-services/rpcz/&#34;&gt;/rpcz&lt;/a&gt; to record RPCs for tracing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;supported-environment&#34;&gt;Supported Environment&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ubuntulinuxmintwsl&#34;&gt;Ubuntu/LinuxMint/WSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fedoracentos&#34;&gt;Fedora/CentOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linux-with-self-built-deps&#34;&gt;Linux with self-built deps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#macos&#34;&gt;MacOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ubuntulinuxmintwsl&#34;&gt;Ubuntu/LinuxMint/WSL&lt;/h2&gt;
&lt;h3 id=&#34;prepare-deps&#34;&gt;Prepare deps&lt;/h3&gt;
&lt;p&gt;Install dependencies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install -y git g++ make libssl-dev libgflags-dev libprotobuf-dev libprotoc-dev protobuf-compiler libleveldb-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to statically link leveldb:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install -y libsnappy-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to enable cpu/heap profilers in examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install -y libgoogle-perftools-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to run tests, install and compile libgtest-dev (which is not compiled yet):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install -y cmake libgtest-dev &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; /usr/src/gtest &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo cmake . &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo mv libgtest* /usr/lib/ &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The directory of gtest source code may be changed, try &lt;code&gt;/usr/src/googletest/googletest&lt;/code&gt; if &lt;code&gt;/usr/src/gtest&lt;/code&gt; is not there.&lt;/p&gt;
&lt;h3 id=&#34;compile-brpc-with-config_brpcsh&#34;&gt;Compile brpc with config_brpc.sh&lt;/h3&gt;
&lt;p&gt;git clone brpc, cd into the repo and run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sh config_brpc.sh --headers&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/include --libs&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/lib
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To change compiler to clang, add &lt;code&gt;--cxx=clang++ --cc=clang&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To not link debugging symbols, add &lt;code&gt;--nodebugsymbols&lt;/code&gt; and compiled binaries will be much smaller.&lt;/p&gt;
&lt;p&gt;To use brpc with glog, add &lt;code&gt;--with-glog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To enable &lt;a href=&#34;../server/serve-thrift/&#34;&gt;thrift support&lt;/a&gt;, install thrift first and add &lt;code&gt;--with-thrift&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; example/echo_c++
$ make
$ ./echo_server &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;
$ ./echo_client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples link brpc statically, if you need to link the shared version, &lt;code&gt;make clean&lt;/code&gt; and &lt;code&gt;LINK_SO=1 make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run tests&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;
$ make
$ sh run_tests.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-brpc-with-cmake&#34;&gt;Compile brpc with cmake&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cmake -B build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake --build build -j6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To help VSCode or Emacs(LSP) to understand code correctly, add &lt;code&gt;-DCMAKE_EXPORT_COMPILE_COMMANDS=ON&lt;/code&gt; to generate &lt;code&gt;compile_commands.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To change compiler to clang, overwrite environment variable &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CXX&lt;/code&gt; to &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;clang++&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;To not link debugging symbols, remove &lt;code&gt;build/CMakeCache.txt&lt;/code&gt; and cmake with &lt;code&gt;-DWITH_DEBUG_SYMBOLS=OFF&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To use brpc with glog, cmake with &lt;code&gt;-DWITH_GLOG=ON&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To enable &lt;a href=&#34;../server/serve-thrift/&#34;&gt;thrift support&lt;/a&gt;, install thrift first and cmake with &lt;code&gt;-DWITH_THRIFT=ON&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run example with cmake&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; example/echo_c++
$ cmake -B build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake --build build -j4
$ ./echo_server &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;
$ ./echo_client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples link brpc statically, if you need to link the shared version, remove &lt;code&gt;CMakeCache.txt&lt;/code&gt; and cmake with &lt;code&gt;-DLINK_SO=ON&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run tests&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ mkdir build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake -DBUILD_UNIT_TESTS&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;ON .. &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fedoracentos&#34;&gt;Fedora/CentOS&lt;/h2&gt;
&lt;h3 id=&#34;prepare-deps-1&#34;&gt;Prepare deps&lt;/h3&gt;
&lt;p&gt;CentOS needs to install EPEL generally otherwise many packages are not available by default.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo yum install epel-release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install dependencies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo yum install git gcc-c++ make openssl-devel gflags-devel protobuf-devel protobuf-compiler leveldb-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to enable cpu/heap profilers in examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo yum install gperftools-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to run tests, install and compile gtest-devel (which is not compiled yet):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo yum install gtest-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-brpc-with-config_brpcsh-1&#34;&gt;Compile brpc with config_brpc.sh&lt;/h3&gt;
&lt;p&gt;git clone brpc, cd into the repo and run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sh config_brpc.sh --headers&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/include --libs&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/lib64
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To change compiler to clang, add &lt;code&gt;--cxx=clang++ --cc=clang&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To not link debugging symbols, add &lt;code&gt;--nodebugsymbols&lt;/code&gt; and compiled binaries will be much smaller.&lt;/p&gt;
&lt;p&gt;To use brpc with glog, add &lt;code&gt;--with-glog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To enable &lt;a href=&#34;../server/serve-thrift/&#34;&gt;thrift support&lt;/a&gt;, install thrift first and add &lt;code&gt;--with-thrift&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; example/echo_c++
$ make
$ ./echo_server &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;
$ ./echo_client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples link brpc statically, if you need to link the shared version, &lt;code&gt;make clean&lt;/code&gt; and &lt;code&gt;LINK_SO=1 make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run tests&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;
$ make
$ sh run_tests.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-brpc-with-cmake-1&#34;&gt;Compile brpc with cmake&lt;/h3&gt;
&lt;p&gt;Same with &lt;a href=&#34;#compile-brpc-with-cmake&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux-with-self-built-deps&#34;&gt;Linux with self-built deps&lt;/h2&gt;
&lt;h3 id=&#34;prepare-deps-2&#34;&gt;Prepare deps&lt;/h3&gt;
&lt;p&gt;brpc builds itself to both static and shared libs by default, so it needs static and shared libs of deps to be built as well.&lt;/p&gt;
&lt;p&gt;Take &lt;a href=&#34;https://github.com/gflags/gflags&#34;&gt;gflags&lt;/a&gt; as example, which does not build shared lib by default, you need to pass options to &lt;code&gt;cmake&lt;/code&gt; to change the behavior:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cmake . -DBUILD_SHARED_LIBS&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; -DBUILD_STATIC_LIBS&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-brpc&#34;&gt;Compile brpc&lt;/h3&gt;
&lt;p&gt;Keep on with the gflags example, let &lt;code&gt;../gflags_dev&lt;/code&gt; be where gflags is cloned.&lt;/p&gt;
&lt;p&gt;git clone brpc. cd into the repo and run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sh config_brpc.sh --headers&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;../gflags_dev /usr/include&amp;#34;&lt;/span&gt; --libs&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;../gflags_dev /usr/lib64&amp;#34;&lt;/span&gt;
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we pass multiple paths to &lt;code&gt;--headers&lt;/code&gt; and &lt;code&gt;--libs&lt;/code&gt; to make the script search for multiple places. You can also group all deps and brpc into one directory, then pass the directory to &amp;ndash;headers/&amp;ndash;libs which actually search all subdirectories recursively and will find necessary files.&lt;/p&gt;
&lt;p&gt;To change compiler to clang, add &lt;code&gt;--cxx=clang++ --cc=clang&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To not link debugging symbols, add &lt;code&gt;--nodebugsymbols&lt;/code&gt; and compiled binaries will be much smaller.&lt;/p&gt;
&lt;p&gt;To use brpc with glog, add &lt;code&gt;--with-glog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To enable &lt;a href=&#34;../server/serve-thrift/&#34;&gt;thrift support&lt;/a&gt;, install thrift first and add &lt;code&gt;--with-thrift&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ls my_dev
gflags_dev protobuf_dev leveldb_dev brpc_dev
$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; brpc_dev
$ sh config_brpc.sh --headers&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;.. --libs&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;..
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-brpc-with-cmake-2&#34;&gt;Compile brpc with cmake&lt;/h3&gt;
&lt;p&gt;Same with &lt;a href=&#34;#compile-brpc-with-cmake&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;macos&#34;&gt;MacOS&lt;/h2&gt;
&lt;p&gt;Note: With same environment, the performance of the MacOS version is worse than the Linux version. If your service is performance-critical, do not use MacOS as your production environment.&lt;/p&gt;
&lt;h3 id=&#34;apple-silicon&#34;&gt;Apple Silicon&lt;/h3&gt;
&lt;p&gt;The code at master HEAD already supports M1 series chips. M2 series are not tested yet. Please feel free to report remaining warnings/errors to us by issues.&lt;/p&gt;
&lt;h3 id=&#34;prepare-deps-3&#34;&gt;Prepare deps&lt;/h3&gt;
&lt;p&gt;Install dependencies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;brew install openssl git gnu-getopt coreutils gflags protobuf leveldb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to enable cpu/heap profilers in examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;brew install gperftools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to run tests, googletest is required. Run &lt;code&gt;brew install googletest&lt;/code&gt; first to see if it works. If not (old homebrew does not have googletest), you can download and compile googletest by your own:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/google/googletest -b release-1.10.0 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; googletest/googletest &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake -DCMAKE_CXX_FLAGS&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;-std=c++11&amp;#34;&lt;/span&gt; .. &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the compilation, copy &lt;code&gt;include/&lt;/code&gt; and &lt;code&gt;lib/&lt;/code&gt; into &lt;code&gt;/usr/local/include&lt;/code&gt; and &lt;code&gt;/usr/local/lib&lt;/code&gt; respectively to expose gtest to all apps&lt;/p&gt;
&lt;h3 id=&#34;openssl&#34;&gt;OpenSSL&lt;/h3&gt;
&lt;p&gt;openssl installed in Monterey may not be found at &lt;code&gt;/usr/local/opt/openssl&lt;/code&gt;, instead it&amp;rsquo;s probably put under &lt;code&gt;/opt/homebrew/Cellar&lt;/code&gt;. If the compiler cannot find openssl：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;brew link openssl --force&lt;/code&gt; first and check if &lt;code&gt;/user/local/opt/openssl&lt;/code&gt; appears.&lt;/li&gt;
&lt;li&gt;If above command does not work, consider making a soft link using &lt;code&gt;sudo ln -s /opt/homebrew/Cellar/openssl@3/3.0.3 /usr/local/opt/openssl&lt;/code&gt;. Note that the installed openssl in above command may be put in different places in different environments, which could be revealed by running &lt;code&gt;brew info openssl&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;compile-brpc-with-config_brpcsh-2&#34;&gt;Compile brpc with config_brpc.sh&lt;/h3&gt;
&lt;p&gt;git clone brpc, cd into the repo and run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sh config_brpc.sh --headers&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/local/include --libs&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/local/lib --cc&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;clang --cxx&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;clang++
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The homebrew in Monterey may install software at different directories from before. If path related errors are reported, try setting headers/libs like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sh config_brpc.sh --headers&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/opt/homebrew/include --libs&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/opt/homebrew/lib --cc&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;clang --cxx&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;clang++
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To not link debugging symbols, add &lt;code&gt;--nodebugsymbols&lt;/code&gt; and compiled binaries will be much smaller.&lt;/p&gt;
&lt;p&gt;To use brpc with glog, add &lt;code&gt;--with-glog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To enable &lt;a href=&#34;../server/serve-thrift/&#34;&gt;thrift support&lt;/a&gt;, install thrift first and add &lt;code&gt;--with-thrift&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; example/echo_c++
$ make
$ ./echo_server &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;
$ ./echo_client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples link brpc statically, if you need to link the shared version, &lt;code&gt;make clean&lt;/code&gt; and &lt;code&gt;LINK_SO=1 make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run tests&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;
$ make
$ sh run_tests.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-brpc-with-cmake-3&#34;&gt;Compile brpc with cmake&lt;/h3&gt;
&lt;p&gt;Same with &lt;a href=&#34;#compile-brpc-with-cmake&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;supported-deps&#34;&gt;Supported deps&lt;/h1&gt;
&lt;h2 id=&#34;gcc-48-71&#34;&gt;GCC: 4.8-7.1&lt;/h2&gt;
&lt;p&gt;c++11 is turned on by default to remove dependencies on boost (atomic).&lt;/p&gt;
&lt;p&gt;The over-aligned issues in GCC7 is suppressed temporarily now.&lt;/p&gt;
&lt;p&gt;Using other versions of gcc may generate warnings, contact us to fix.&lt;/p&gt;
&lt;p&gt;Adding &lt;code&gt;-D__const__=&lt;/code&gt; to cxxflags in your makefiles is a must to avoid &lt;a href=&#34;../bthread/thread-local/&#34;&gt;errno issue in gcc4+&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;clang-35-40&#34;&gt;Clang: 3.5-4.0&lt;/h2&gt;
&lt;p&gt;no known issues.&lt;/p&gt;
&lt;h2 id=&#34;glibc-212-225&#34;&gt;glibc: 2.12-2.25&lt;/h2&gt;
&lt;p&gt;no known issues.&lt;/p&gt;
&lt;h2 id=&#34;protobuf-24&#34;&gt;protobuf: 2.4+&lt;/h2&gt;
&lt;p&gt;Be compatible with pb 3.x and pb 2.x with the same file:
Don&amp;rsquo;t use new types in proto3 and start the proto file with &lt;code&gt;syntax=&amp;quot;proto2&amp;quot;;&lt;/code&gt;
&lt;a href=&#34;https://github.com/brpc/brpc/blob/master/tools/add_syntax_equal_proto2_to_all.sh&#34;&gt;tools/add_syntax_equal_proto2_to_all.sh&lt;/a&gt;can add &lt;code&gt;syntax=&amp;quot;proto2&amp;quot;&lt;/code&gt; to all proto files without it.&lt;/p&gt;
&lt;p&gt;Arena in pb 3.x is not supported yet.&lt;/p&gt;
&lt;h2 id=&#34;gflags-20-221&#34;&gt;gflags: 2.0-2.2.1&lt;/h2&gt;
&lt;p&gt;no known issues.&lt;/p&gt;
&lt;h2 id=&#34;openssl-097-11&#34;&gt;openssl: 0.97-1.1&lt;/h2&gt;
&lt;p&gt;required by https.&lt;/p&gt;
&lt;h2 id=&#34;tcmalloc-17-25&#34;&gt;tcmalloc: 1.7-2.5&lt;/h2&gt;
&lt;p&gt;brpc does &lt;strong&gt;not&lt;/strong&gt; link &lt;a href=&#34;http://goog-perftools.sourceforge.net/doc/tcmalloc.html&#34;&gt;tcmalloc&lt;/a&gt; by default. Users link tcmalloc on-demand.&lt;/p&gt;
&lt;p&gt;Comparing to ptmalloc embedded in glibc, tcmalloc often improves performance. However different versions of tcmalloc may behave really differently. For example, tcmalloc 2.1 may make multi-threaded examples in brpc perform significantly worse(due to a spinlock in tcmalloc) than the one using tcmalloc 1.7 and 2.5. Even different minor versions may differ. When you program behave unexpectedly, remove tcmalloc or try another version.&lt;/p&gt;
&lt;p&gt;Code compiled with gcc 4.8.2 and linked to a tcmalloc compiled with earlier GCC may crash or deadlock before main(), E.g:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/tcmalloc_stuck.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;When you meet the issue, compile tcmalloc with the same GCC.&lt;/p&gt;
&lt;p&gt;Another common issue with tcmalloc is that it does not return memory to system as early as ptmalloc. So when there&amp;rsquo;s an invalid memory access, the program may not crash directly, instead it crashes at a unrelated place, or even not crash. When you program has weird memory issues, try removing tcmalloc.&lt;/p&gt;
&lt;p&gt;If you want to use &lt;a href=&#34;../builtin-services/cpu_profiler&#34;&gt;cpu profiler&lt;/a&gt; or &lt;a href=&#34;../builtin-services/heap_profiler&#34;&gt;heap profiler&lt;/a&gt;, do link &lt;code&gt;libtcmalloc_and_profiler.a&lt;/code&gt;. These two profilers are based on tcmalloc. &lt;a href=&#34;../builtin-services/contention_profiler&#34;&gt;contention profiler&lt;/a&gt; does not require tcmalloc.&lt;/p&gt;
&lt;p&gt;When you remove tcmalloc, not only remove the linkage with tcmalloc but also the macro &lt;code&gt;-DBRPC_ENABLE_CPU_PROFILER&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;glog-33&#34;&gt;glog: 3.3+&lt;/h2&gt;
&lt;p&gt;brpc implements a default &lt;a href=&#34;../../src/butil/logging.h&#34;&gt;logging utility&lt;/a&gt; which conflicts with glog. To replace this with glog, add &lt;em&gt;&amp;ndash;with-glog&lt;/em&gt; to config_brpc.sh or add &lt;code&gt;-DWITH_GLOG=ON&lt;/code&gt; to cmake.&lt;/p&gt;
&lt;h2 id=&#34;valgrind-38&#34;&gt;valgrind: 3.8+&lt;/h2&gt;
&lt;p&gt;brpc detects valgrind automatically (and registers stacks of bthread). Older valgrind(say 3.2) is not supported.&lt;/p&gt;
&lt;h2 id=&#34;thrift-093-0110&#34;&gt;thrift: 0.9.3-0.11.0&lt;/h2&gt;
&lt;p&gt;no known issues.&lt;/p&gt;
&lt;h1 id=&#34;track-instances&#34;&gt;Track instances&lt;/h1&gt;
&lt;p&gt;We provide a program to help you to track and monitor all brpc instances. Just run &lt;a href=&#34;https://github.com/brpc/brpc/tree/master/tools/trackme_server/&#34;&gt;trackme_server&lt;/a&gt; somewhere and launch need-to-be-tracked instances with -trackme_server=SERVER. The trackme_server will receive pings from instances periodically and print logs when it does. You can aggregate instance addresses from the log and call builtin services of the instances for further information.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Performance benchmark</title>
      <link>https://brpc.incubator.apache.org/docs/benchmark/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/benchmark/</guid>
      <description>
        
        
        &lt;h1 id=&#34;序言&#34;&gt;序言&lt;/h1&gt;
&lt;p&gt;在多核的前提下，性能和线程是紧密联系在一起的。线程间的跳转对高频IO操作的性能有决定性作用: 一次跳转意味着至少3-20微秒的延时，由于每个核心的L1 cache独立（我们的cpu L2 cache也是独立的），随之而来是大量的cache miss，一些变量的读取、写入延时会从纳秒级上升几百倍至微秒级: 等待cpu把对应的cacheline同步过来。有时这带来了一个出乎意料的结果，当每次的处理都很简短时，一个多线程程序未必比一个单线程程序更快。因为前者可能在每次付出了大的切换代价后只做了一点点“正事”，而后者在不停地做“正事”。不过单线程也是有代价的，它工作良好的前提是“正事”都很快，否则一旦某次变慢就使后续的所有“正事”都被延迟了。在一些处理时间普遍较短的程序中，使用（多个不相交的）单线程能最大程度地”做正事“，由于每个请求的处理时间确定，延时表现也很稳定，各种http server正是这样。但我们的检索服务要做的事情可就复杂多了，有大量的后端服务需要访问，广泛存在的长尾请求使每次处理的时间无法确定，排序策略也越来越复杂。如果还是使用（多个不相交的）单线程的话，一次难以预计的性能抖动，或是一个大请求可能导致后续一堆请求被延迟。&lt;/p&gt;
&lt;p&gt;为了避免请求之间相互影响，请求级的线程跳转是brpc必须付出的代价，我们能做的是使&lt;a href=&#34;../rpc-in-depth/io#the-full-picture&#34;&gt;线程跳转最优化&lt;/a&gt;。不过，对服务的性能测试还不能很好地体现这点。测试中的处理往往极为简单，使得线程切换的影响空前巨大，通过控制多线程和单线程处理的比例，我们可以把一个测试服务的qps从100万到500万操纵自如（同机），这损伤了性能测试结果的可信度。要知道，真实的服务并不是在累加一个数字，或者echo一个字符串，一个qps几百万的echo程序没有指导意义。鉴于此，在发起性能测试一年后（15年底），在brpc又经历了1200多次改动后，我们需要review所有的测试，加强其中的线程因素，以获得对真实场景有明确意义的结果。具体来说:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求不应等长，要有长尾。这能考察RPC能否让请求并发，否则一个慢请求会影响大量后续请求。&lt;/li&gt;
&lt;li&gt;要有多级server的场景。server内用client访问下游server，这能考察server和client的综合表现。&lt;/li&gt;
&lt;li&gt;要有一个client访问多个server的场景。这能考察负载均衡是否足够并发，真实场景中很少一个client只访问一个server。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们希望这套测试场景对其他服务的性能测试有借鉴意义。&lt;/p&gt;
&lt;h1 id=&#34;测试目标&#34;&gt;测试目标&lt;/h1&gt;
&lt;h2 id=&#34;ub&#34;&gt;UB&lt;/h2&gt;
&lt;p&gt;百度在08年开发的RPC框架，在百度产品线广泛使用，已被brpc代替。UB的每个请求独占一个连接(连接池)，在大规模服务中每台机器都需要保持大量的连接，限制了其使用场景，像百度的分布式系统没有用UB。UB只支持nshead+mcpack协议，也没怎么考虑扩展性，所以增加新协议和新功能往往要调整大段代码，在实践中大部分人“知难而退”了。UB缺乏调试和运维接口，服务的运行状态对用户基本是黑盒，只能靠低效地打日志来追踪问题，服务出现问题时常要拉上维护者一起排查，效率很低。UB有多个变种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ubrpc: 百度在10年基于UB开发的RPC框架，用.idl文件(类似.proto)描述数据的schema，而不是手动打包。这个RPC有被使用，但不广泛。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;nova_pbrpc: 百度网盟团队在12年基于UB开发的RPC框架，用protobuf代替mcpack作为序列化方法，协议是nshead + user&amp;rsquo;s protobuf。&lt;/li&gt;
&lt;li&gt;public_pbrpc: 百度在13年初基于UB开发的RPC框架，用protobuf代替mcpack作为序列化方法，但协议与nova_pbrpc不同，大致是nshead + meta protobuf。meta protobuf中有个string字段包含user&amp;rsquo;s protobuf。由于用户数据要序列化两次，这个RPC的性能很差，没有被推广开来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们以在百度网盟团队广泛使用的nova_pbrpc为UB的代表。测试时其代码为r10500。早期的UB支持CPOOL和XPOOL，分别使用&lt;a href=&#34;http://linux.die.net/man/2/select&#34;&gt;select&lt;/a&gt;和&lt;a href=&#34;http://kircher-schwanninger.de/michael/publications/lf.pdf&#34;&gt;leader-follower模型&lt;/a&gt;，后来提供了EPOLL，使用&lt;a href=&#34;http://man7.org/linux/man-pages/man7/epoll.7.html&#34;&gt;epoll&lt;/a&gt;处理多路连接。鉴于产品线大都是用EPOLL模型，我们的UB配置也使用EPOLL。UB只支持&lt;a href=&#34;../client/basics/#connection-type&#34;&gt;连接池&lt;/a&gt;，结果用“&lt;strong&gt;ubrpc_mc&lt;/strong&gt;&amp;ldquo;指代（mc代表&amp;quot;multiple
connection&amp;rdquo;）。虽然这个名称不太准确（见上文对ubrpc的介绍），但在本文的语境下，请默认ubrpc = UB。&lt;/p&gt;
&lt;h2 id=&#34;hulu-pbrpc&#34;&gt;hulu-pbrpc&lt;/h2&gt;
&lt;p&gt;百度在13年基于saber(kylin变种)和protobuf实现的RPC框架，hulu在多线程实现上有较多问题，已被brpc代替，测试时其代码为&lt;code&gt;pbrpc_2-0-15-27959_PD_BL&lt;/code&gt;。hulu-pbrpc只支持单连接，结果用“&lt;strong&gt;hulu-pbrpc&lt;/strong&gt;&amp;ldquo;指代。&lt;/p&gt;
&lt;h2 id=&#34;brpc&#34;&gt;brpc&lt;/h2&gt;
&lt;p&gt;INF在2014年底开发至今的rpc产品，支持百度内所有协议（不限于protobuf），并第一次统一了百度主要分布式系统和业务线的RPC框架。测试时代码为r31906。brpc既支持单连接也支持连接池，前者的结果用&amp;rdquo;&lt;strong&gt;baidu-rpc&lt;/strong&gt;&amp;ldquo;指代，后者用“&lt;strong&gt;baidu-rpc_mc&lt;/strong&gt;&amp;ldquo;指代。&lt;/p&gt;
&lt;h2 id=&#34;sofa-pbrpc&#34;&gt;sofa-pbrpc&lt;/h2&gt;
&lt;p&gt;百度大搜团队在13年基于boost::asio和protobuf实现的RPC框架，有多个版本，咨询相关同学后，确认ps/opensource下的和github上的较新，且会定期同步。故测试使用使用ps/opensource下的版本。测试时其代码为&lt;code&gt;sofa-pbrpc_1-0-2_BRANCH&lt;/code&gt;。sofa-pbrpc只支持单连接，结果用“&lt;strong&gt;sofa-pbrpc&lt;/strong&gt;”指代。&lt;/p&gt;
&lt;h2 id=&#34;apache-thrift&#34;&gt;apache thrift&lt;/h2&gt;
&lt;p&gt;thrift是由facebook最早在07年开发的序列化方法和rpc框架，包含独特的序列化格式和IDL，支持很多编程语言。开源后改名&lt;a href=&#34;https://thrift.apache.org/&#34;&gt;apache thrift&lt;/a&gt;，fb自己有一个&lt;a href=&#34;https://github.com/facebook/fbthrift&#34;&gt;fbthrift分支&lt;/a&gt;，我们使用的是apache thrift。测试时其代码为&lt;code&gt;thrift_0-9-1-400_PD_BL&lt;/code&gt;。thrift的缺点是: 代码看似分层清晰，client和server选择很多，但没有一个足够通用，每个server实现都只能解决很小一块场景，每个client都线程不安全，实际使用很麻烦。由于thrift没有线程安全的client，所以每个线程中都得建立一个client，使用独立的连接。在测试中thrift其实是占了其他实现的便宜: 它的client不需要处理多线程问题。thrift的结果用&amp;rdquo;&lt;strong&gt;thrift_mc&lt;/strong&gt;&amp;ldquo;指代。&lt;/p&gt;
&lt;h2 id=&#34;grpc&#34;&gt;gRPC&lt;/h2&gt;
&lt;p&gt;由google开发的rpc框架，使用http/2和protobuf 3.0，测试时其代码为&lt;a href=&#34;https://github.com/grpc/grpc/tree/release-0_11&#34;&gt;https://github.com/grpc/grpc/tree/release-0_11&lt;/a&gt;。gRPC并不是stubby，定位更像是为了推广http/2和protobuf 3.0，但鉴于很多人对它的表现很感兴趣，我们也（很麻烦地）把它加了进来。gRPC的结果用&amp;rdquo;&lt;strong&gt;grpc&lt;/strong&gt;&amp;ldquo;指代。&lt;/p&gt;
&lt;h1 id=&#34;测试方法&#34;&gt;测试方法&lt;/h1&gt;
&lt;p&gt;如序言中解释的那样，性能数字有巨大的调整空间。这里的关键在于，我们对RPC的底线要求是什么，脱离了这个底线，测试中的表现就严重偏离真实环境中的了。&lt;/p&gt;
&lt;p&gt;这个底线我们认为是&lt;strong&gt;RPC必须能处理长尾&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在百度的环境中，这是句大白话，哪个产品线，哪个系统没有长尾呢？作为承载大部分服务的RPC框架自然得处理好长尾，减少长尾对正常请求的影响。但在实现层面，这个问题对设计的影响太大了。如果测试中没有长尾，那么RPC实现就可以假设每个请求都差不多快，这时候最优的方法是用多个线程独立地处理请求。由于没有上下文切换和cache一致性同步，程序的性能会显著高于多个线程协作时的表现。&lt;/p&gt;
&lt;p&gt;比如简单的echo程序，处理一个请求只需要200-300纳秒，单个线程可以达到300-500万的吞吐。但如果多个线程协作，即使在极其流畅的系统中，也要付出3-5微秒的上下文切换代价和1微秒的cache同步代价，这还没有考虑多个线程间的其他互斥逻辑，一般来说单个线程的吞吐很难超过10万，即使24核全部用满，吞吐也只有240万，不及一个线程。这正是以http server为典型的服务选用&lt;a href=&#34;../rpc-in-depth/threading-overview/#single-threaded-reactorhttpenwikipediaorgwikireactor_pattern&#34;&gt;单线程模型&lt;/a&gt;的原因（多个线程独立运行eventloop）: 大部分http请求的处理时间是可预测的，对下游的访问也不会有任何阻塞代码。这个模型可以最大化cpu利用率，同时提供可接受的延时。&lt;/p&gt;
&lt;p&gt;多线程付出这么大的代价是为了&lt;strong&gt;隔离请求间的影响&lt;/strong&gt;。一个计算复杂或索性阻塞的过程不会影响到其他请求，1%的长尾最终只会影响到1%的性能。而多个独立的线程是保证不了这点的，一个请求进入了一个线程就等于“定了终生”，如果前面的请求慢了一下，那也只能跟着慢了。1%的长尾会影响远超1%的请求，最终表现不佳。换句话说，乍看上去多线程模型“慢”了，但在真实应用中反而会获得更好的综合性能。&lt;/p&gt;
&lt;p&gt;延时能精确地体现出长尾的干扰作用，如果普通请求的延时没有被长尾请求干扰，就说明RPC成功地隔离了请求。而QPS无法体现这点，只要CPU都在忙，即使一个正常请求进入了挤满长尾的队列而被严重延迟，最终的QPS也变化不大。为了测量长尾的干扰作用，我们在涉及到延时的测试中都增加了1%的长尾请求。&lt;/p&gt;
&lt;h1 id=&#34;开始测试&#34;&gt;开始测试&lt;/h1&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;性能测试使用的机器配置为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单机1: CPU开超线程24核，E5-2620 @ 2.00GHz；64GB内存；OS linux 2.6.32_1-15-0-0&lt;/li&gt;
&lt;li&gt;多机1（15台+8台）: CPU均未开超线程12核，其中15台的CPU为E5-2420 @ 1.90GHz.，64GB内存，千兆网卡，无法开启多队列。其余8台为E5-2620 2.0GHz，千兆网卡，绑定多队列到前8个核。这些长期测试机器比较杂，跨了多个机房，测试中延时在1ms以上的就是这批机器。&lt;/li&gt;
&lt;li&gt;多机2（30台）: CPU未开超线程12核，E5-2620 v3 @ 2.40GHz.；96GB内存；OS linux 2.6.32_1-17-0-0；万兆网卡，绑定多队列到前8个核。这是临时借用的新机器，配置非常好，都在广州机房，延时非常短，测试中延时在几百微秒的就是这批机器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面所有的曲线图是使用brpc开发的dashboard程序绘制的，去掉路径后可以看到和所有brpc
server一样的&lt;a href=&#34;../builtin-services/buildin_services/&#34;&gt;内置服务&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;如无特殊说明，所有测试中的配置只是数量差异（线程数，请求大小，client个数etc），而不是模型差异。我们确保用户看到的qps和延时是同一个场景的不同维度，而不是无法统一的两个场景。&lt;/p&gt;
&lt;p&gt;所有RPC server都配置了24个工作线程，这些线程一般运行用户的处理逻辑。关于每种RPC的特殊说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UB: 配置了12个reactor线程，使用EPOOL模型。连接池限制数配置为线程个数（24）&lt;/li&gt;
&lt;li&gt;hulu-pbrpc: 额外配置了12个IO线程。这些线程会处理fd读取，请求解析等任务。hulu有个“共享队列“的配置项，默认不打开，作用是把fd静态散列到多个线程中，由于线程间不再争抢，hulu的qps会显著提高，但会明显地被长尾影响（原因见&lt;a href=&#34;#%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95&#34;&gt;测试方法&lt;/a&gt;）。考虑到大部分使用者并不会去改配置，我们也选择不打开。&lt;/li&gt;
&lt;li&gt;thrift: 额外配置了12个IO线程。这些线程会处理fd读取，请求解析等任务。thrift的client不支持多线程，每个线程得使用独立的client，连接也都是分开的。&lt;/li&gt;
&lt;li&gt;sofa-pbrpc: 按照sofa同学的要求，把io_service_pool_size配置为24，work_thread_num配置为1。大概含义是使用独立的24组线程池，每组1个worker thread。和hulu不打开“共享队列”时类似，这个配置会显著提高sofa-pbrpc的QPS，但同时使它失去了处理长尾的能力。如果你在真实产品中使用，我们不建议这个配置。（而应该用io_service_pool_size=1, work_thread_num=24)&lt;/li&gt;
&lt;li&gt;brpc: 尽管brpc的client运行在bthread中时会获得10%~20%的QPS提升和更低的延时，但测试中的client都运行统一的pthread中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有的RPC client都以多个线程同步方式发送，这种方法最接近于真实系统中的情况，在考察QPS时也兼顾了延时因素。&lt;/p&gt;
&lt;p&gt;一种流行的方案是client不停地往连接中写入数据看server表现，这个方法的弊端在于: server一下子能读出大量请求，不同RPC的比拼变成了“for循环执行用户代码”的比拼，而不是分发请求的效率。在真实系统中server很少能同时读到超过4个请求。这个方法也完全放弃了延时，client其实是让server陷入了雪崩时才会进入的状态，所有请求都因大量排队而超时了。&lt;/p&gt;
&lt;h2 id=&#34;同机单client单server在不同请求下的qps越高越好&#34;&gt;同机单client→单server在不同请求下的QPS（越高越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;单机1&lt;/a&gt;上。图中的数值均为用户数据的字节数，实际的请求尺寸还要包括协议头，一般会增加40字节左右。&lt;/p&gt;
&lt;p&gt;（X轴是用户数据的字节数，Y轴是对应的QPS）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/qps_vs_reqsize.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;以_mc结尾的曲线代表client和server保持多个连接（线程数个），在本测试中会有更好的表现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brpc: 当请求包小于16KB时，单连接下的吞吐超过了多连接的ubrpc_mc和thrift_mc，随着请求包变大，内核对单个连接的写入速度成为瓶颈。而多连接下的brpc则达到了测试中最高的2.3GB/s。注意: 虽然使用连接池的brpc在发送大包时吞吐更高，但也会耗费更多的CPU（UB和thrift也是这样）。下图中的单连接brpc已经可以提供800多兆的吞吐，足以打满万兆网卡，而使用的CPU可能只有多链接下的1/2(写出过程是&lt;a href=&#34;../rpc-in-depth/io#sending-messages&#34;&gt;wait-free的&lt;/a&gt;)，真实系统中请优先使用单链接。&lt;/li&gt;
&lt;li&gt;thrift: 初期明显低于brpc，随着包变大超过了单连接的brpc。&lt;/li&gt;
&lt;li&gt;UB:和thrift类似的曲线，但平均要低4-5万QPS，在32K包时超过了单连接的brpc。整个过程中QPS几乎没变过。&lt;/li&gt;
&lt;li&gt;gRPC: 初期几乎与UB平行，但低1万左右，超过8K开始下降。&lt;/li&gt;
&lt;li&gt;hulu-pbrpc和sofa-pbrpc: 512字节前高于UB和gRPC，但之后就急转直下，相继垫底。这个趋势是写不够并发的迹象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;同机单client单server在不同线程数下的qps越高越好&#34;&gt;同机单client→单server在不同线程数下的QPS（越高越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;单机1&lt;/a&gt;上。&lt;/p&gt;
&lt;p&gt;（X轴是线程数，Y轴是对应的QPS）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/qps_vs_threadnum.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;brpc: 随着发送线程增加，QPS在快速增加，有很好的多线程扩展性。&lt;/p&gt;
&lt;p&gt;UB和thrift: 8个线程下高于brpc，但超过8个线程后被brpc迅速超过，thrift继续“平移”，UB出现了明显下降。&lt;/p&gt;
&lt;p&gt;gRPC，hulu-pbrpc，sofa-pbrpc: 几乎重合，256个线程时相比1个线程时只有1倍的提升，多线程扩展性不佳。&lt;/p&gt;
&lt;h2 id=&#34;同机单client单server在固定qps下的延时cdfbuiltin-servicesvars统计和查看分位值越左越好越直越好&#34;&gt;同机单client→单server在固定QPS下的延时&lt;a href=&#34;../builtin-services/vars/#%E7%BB%9F%E8%AE%A1%E5%92%8C%E6%9F%A5%E7%9C%8B%E5%88%86%E4%BD%8D%E5%80%BC&#34;&gt;CDF&lt;/a&gt;（越左越好，越直越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;单机1&lt;/a&gt;上。考虑到不同RPC的处理能力，我们选择了一个较低、在不少系统中会达到的的QPS: 1万。&lt;/p&gt;
&lt;p&gt;本测试中有1%的长尾请求耗时5毫秒，长尾请求的延时不计入结果，因为我们考察的是普通请求是否被及时处理了。&lt;/p&gt;
&lt;p&gt;（X轴是延时（微秒），Y轴是小于X轴延时的请求比例）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/latency_cdf.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brpc: 平均延时短，几乎没有被长尾影响。&lt;/li&gt;
&lt;li&gt;UB和thrift: 平均延时比brpc高1毫秒，受长尾影响不大。&lt;/li&gt;
&lt;li&gt;hulu-pbrpc: 走向和UB和thrift类似，但平均延时进一步增加了1毫秒。&lt;/li&gt;
&lt;li&gt;gRPC : 初期不错，到长尾区域后表现糟糕，直接有一部分请求超时了。（反复测试都是这样，像是有bug）&lt;/li&gt;
&lt;li&gt;sofa-pbrpc: 30%的普通请求（上图未显示）被长尾严重干扰。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;跨机多client单server的qps越高越好&#34;&gt;跨机多client→单server的QPS（越高越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;多机1&lt;/a&gt;上。&lt;/p&gt;
&lt;p&gt;（X轴是client数，Y轴是对应的QPS）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/qps_vs_multi_client.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brpc: 随着cilent增加，server的QPS在快速增加，有不错的client扩展性。&lt;/li&gt;
&lt;li&gt;sofa-pbrpc: 随着client增加，server的QPS也在快速增加，但幅度不如brpc，client扩展性也不错。从16个client到32个client时的提升较小。&lt;/li&gt;
&lt;li&gt;hulu-pbrpc: 随着client增加，server的QPS在增加，但幅度进一步小于sofa-pbrpc。&lt;/li&gt;
&lt;li&gt;UB: 增加client几乎不能增加server的QPS。&lt;/li&gt;
&lt;li&gt;thrift: 平均QPS低于UB，增加client几乎不能增加server的QPS。&lt;/li&gt;
&lt;li&gt;gRPC: 垫底、增加client几乎不能增加server的QPS。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;跨机多client单server在固定qps下的延时cdfbuiltin-servicesvars统计和查看分位值越左越好越直越好&#34;&gt;跨机多client→单server在固定QPS下的延时&lt;a href=&#34;../builtin-services/vars/#%E7%BB%9F%E8%AE%A1%E5%92%8C%E6%9F%A5%E7%9C%8B%E5%88%86%E4%BD%8D%E5%80%BC&#34;&gt;CDF&lt;/a&gt;（越左越好，越直越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;多机1&lt;/a&gt;上。负载均衡算法为round-robin或RPC默认提供的。由于有32个client且一些RPC的单client能力不佳，我们为每个client仅设定了2500QPS，这是一个真实业务系统能达到的数字。&lt;/p&gt;
&lt;p&gt;本测试中有1%的长尾请求耗时15毫秒，长尾请求的延时不计入结果，因为我们考察的是普通请求是否被及时处理了。&lt;/p&gt;
&lt;p&gt;（X轴是延时（微秒），Y轴是小于X轴延时的请求比例）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/multi_client_latency_cdf.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brpc: 平均延时短，几乎没有被长尾影响。&lt;/li&gt;
&lt;li&gt;UB和thrift: 平均延时短，受长尾影响小，平均延时高于brpc&lt;/li&gt;
&lt;li&gt;sofa-pbrpc: 14%的普通请求被长尾严重干扰。&lt;/li&gt;
&lt;li&gt;hulu-pbrpc: 15%的普通请求被长尾严重干扰。&lt;/li&gt;
&lt;li&gt;gRPC: 已经完全失控，非常糟糕。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;跨机多client多server在固定qps下的延时cdfbuiltin-servicesvars统计和查看分位值越左越好越直越好&#34;&gt;跨机多client→多server在固定QPS下的延时&lt;a href=&#34;../builtin-services/vars/#%E7%BB%9F%E8%AE%A1%E5%92%8C%E6%9F%A5%E7%9C%8B%E5%88%86%E4%BD%8D%E5%80%BC&#34;&gt;CDF&lt;/a&gt;（越左越好，越直越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;多机2&lt;/a&gt;上。20台每台运行4个client，多线程同步访问10台server。负载均衡算法为round-robin或RPC默认提供的。由于gRPC访问多server较麻烦且有很大概率仍表现不佳，这个测试不包含gRPC。&lt;/p&gt;
&lt;p&gt;本测试中有1%的长尾请求耗时10毫秒，长尾请求的延时不计入结果，因为我们考察的是普通请求是否被及时处理了。&lt;/p&gt;
&lt;p&gt;（X轴是延时（微秒），Y轴是小于X轴延时的请求比例）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/multi_server_latency_cdf.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brpc和UB: 平均延时短，几乎没有被长尾影响。&lt;/li&gt;
&lt;li&gt;thrift: 平均延时显著高于brpc和UB。&lt;/li&gt;
&lt;li&gt;sofa-pbrpc: 2.5%的普通请求被长尾严重干扰。&lt;/li&gt;
&lt;li&gt;hulu-pbrpc: 22%的普通请求被长尾严重干扰。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;跨机多client多server多server在固定qps下的延时cdfbuiltin-servicesvars统计和查看分位值越左越好越直越好&#34;&gt;跨机多client→多server→多server在固定QPS下的延时&lt;a href=&#34;../builtin-services/vars/#%E7%BB%9F%E8%AE%A1%E5%92%8C%E6%9F%A5%E7%9C%8B%E5%88%86%E4%BD%8D%E5%80%BC&#34;&gt;CDF&lt;/a&gt;（越左越好，越直越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;多机2&lt;/a&gt;上。14台每台运行4个client，多线程同步访问8台server，这些server还会同步访问另外8台server。负载均衡算法为round-robin或RPC默认提供的。由于gRPC访问多server较麻烦且有很大概率仍表现不佳，这个测试不包含gRPC。&lt;/p&gt;
&lt;p&gt;本测试中有1%的长尾请求耗时10毫秒，长尾请求的延时不计入结果，因为我们考察的是普通请求是否被及时处理了。&lt;/p&gt;
&lt;p&gt;（X轴是延时（微秒），Y轴是小于X轴延时的请求比例）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/twolevel_server_latency_cdf.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brpc: 平均延时短，几乎没有被长尾影响。&lt;/li&gt;
&lt;li&gt;UB: 平均延时短，长尾区域略差于brpc。&lt;/li&gt;
&lt;li&gt;thrift: 平均延时显著高于brpc和UB。&lt;/li&gt;
&lt;li&gt;sofa-pbrpc: 17%的普通请求被长尾严重干扰，其中2%的请求延时极长。&lt;/li&gt;
&lt;li&gt;hulu-pbrpc: 基本消失在视野中，已无法正常工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论&lt;/h1&gt;
&lt;p&gt;brpc: 在吞吐，平均延时，长尾处理上都表现优秀。&lt;/p&gt;
&lt;p&gt;UB: 平均延时和长尾处理的表现都不错，吞吐的扩展性较差，提高线程数和client数几乎不能提升吞吐。&lt;/p&gt;
&lt;p&gt;thrift: 单机的平均延时和吞吐尚可，多机的平均延时明显高于brpc和UB。吞吐的扩展性较差，提高线程数和client数几乎不能提升吞吐。&lt;/p&gt;
&lt;p&gt;sofa-pbrpc: 处理小包的吞吐尚可，大包的吞吐显著低于其他RPC，延时受长尾影响很大。&lt;/p&gt;
&lt;p&gt;hulu-pbrpc: 单机表现和sofa-pbrpc类似，但多机的延时表现极差。&lt;/p&gt;
&lt;p&gt;gRPC: 几乎在所有参与的测试中垫底，可能它的定位是给google cloud platform的用户提供一个多语言，对网络友好的实现，性能还不是要务。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Security</title>
      <link>https://brpc.incubator.apache.org/docs/community/security/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/community/security/</guid>
      <description>
        
        
        &lt;p&gt;The Apache Software Foundation takes a rigorous stance on eliminating security issues in its software projects. Likewise, Apache bRPC is also vigilant and takes security issues related to its features and functionality into the highest consideration.&lt;/p&gt;
&lt;p&gt;If you have any concerns regarding bRPC’s security, or you discover a vulnerability or potential threat, please don’t hesitate to get in touch with the &lt;a href=&#34;http://www.apache.org/security/&#34;&gt;Apache Security Team&lt;/a&gt; by dropping an email at &lt;a href=&#34;mailto:security@apache.org&#34;&gt;security@apache.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please specify the project name as &amp;ldquo;bRPC&amp;rdquo; in the email, and provide a description of the relevant problem or potential threat. You are also urged to recommend how to reproduce and replicate the issue.&lt;/p&gt;
&lt;p&gt;The Apache Security Team and the bRPC community will get back to you after assessing and analyzing the findings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt; that the security issue should be reported on the security email first, before disclosing it on any public domain.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Committer Guide</title>
      <link>https://brpc.incubator.apache.org/docs/community/committer/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/community/committer/</guid>
      <description>
        
        
        &lt;p&gt;Participants in the Apache community have the following roles: &lt;strong&gt;Contributor&lt;/strong&gt;, &lt;strong&gt;Committer&lt;/strong&gt;, and &lt;strong&gt;PMC(Project Member Committee) member&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When an individual contribution is accepted by the project, he/she will automatically become a Contributor.
Committer and PMC members are invited by the PMC after a consensus vote.&lt;/p&gt;
&lt;p&gt;Here we will only discuss some guidelines for the bRPC community to invite Committer and PMC member in order to be able to effectively estimate developer participation in the community.&lt;/p&gt;
&lt;h2 id=&#34;the-apache-way&#34;&gt;The Apache Way:&lt;/h2&gt;
&lt;p&gt;Before anyone can become a Committer or PMC member of an Apache project, they should first understand &amp;ldquo;&lt;a href=&#34;https://apache.org/theapacheway/index.html&#34;&gt;What&amp;rsquo;s TheApacheWay&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;guidance-for-committer&#34;&gt;Guidance for Committer:&lt;/h2&gt;
&lt;p&gt;Have significant feature contributions (not limited to code), or long-term participation in community building (bug fixing, code review, documentation translation and proofreading, community outreach, etc.)
Participate in community discussions in public domain and have a positive impact.&lt;/p&gt;
&lt;h2 id=&#34;guidance-for-pmc-member&#34;&gt;Guidance for PMC member:&lt;/h2&gt;
&lt;p&gt;Be able to actively participate in community maintenance work, such as answering emails, organizing wiki, release management, code review, etc.
Recognize the Apache community philosophy and be able to actively promote the community development.&lt;/p&gt;
&lt;h2 id=&#34;peer-review&#34;&gt;Peer Review:&lt;/h2&gt;
&lt;p&gt;The above requirements are highly subjective and cannot be measured quantitatively. Therefore, the PMC needs to form a regular review mechanism to discuss and invite people who meet the requirements.&lt;/p&gt;
&lt;p&gt;Conduct a review every 1-2 months to nominate and discuss suitable candidates&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Download bRPC</title>
      <link>https://brpc.incubator.apache.org/docs/downloadbrpc/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/downloadbrpc/</guid>
      <description>
        
        
        &lt;!--
{% comment %}
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the &#34;License&#34;); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
{% endcomment %}
--&gt;
&lt;h2 id=&#34;apache-brpc-incubating-downloads&#34;&gt;Apache brpc (incubating) Downloads&lt;/h2&gt;
&lt;p&gt;Apache brpc (incubating) is released as a source artifact.
We are pleased to announce our 1.1.0 release as below.&lt;/p&gt;
&lt;h3 id=&#34;release-candidate&#34;&gt;Release Candidate&lt;/h3&gt;
&lt;!--when pass vote, we can change it back to Release Artifacts
--&gt;
&lt;table class=&#34;table table-hover sortable&#34;&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;b&gt;Name&lt;/b&gt;&lt;/th&gt;
            &lt;th&gt;&lt;b&gt;Archive&lt;/b&gt;&lt;/th&gt;
            &lt;th&gt;&lt;b&gt;SHA-512&lt;/b&gt;&lt;/th&gt;
            &lt;th&gt;&lt;b&gt;Signature&lt;/b&gt;&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Apache brpc (incubating) 1.1.0 (tar.gz)&lt;/td&gt;
            &lt;td&gt;&lt;a href=&#34;https://dlcdn.apache.org/incubator/brpc/1.1.0/apache-brpc-1.1.0-incubating-src.tar.gz&#34;&gt;tar.gz&lt;/a&gt;&lt;/td&gt;
            &lt;td&gt;&lt;a href=&#34;https://downloads.apache.org/incubator/brpc/1.1.0/apache-brpc-1.1.0-incubating-src.tar.gz.sha512&#34;&gt;SHA-512&lt;/a&gt;&lt;/td&gt;
            &lt;td&gt;&lt;a href=&#34;https://downloads.apache.org/incubator/brpc/1.1.0/apache-brpc-1.1.0-incubating-src.tar.gz.asc&#34;&gt;ASC&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Apache brpc (incubating) 1.0.0 (tar.gz)&lt;/td&gt;
            &lt;td&gt;&lt;a href=&#34;https://dlcdn.apache.org/incubator/brpc/1.0.0/apache-brpc-1.0.0-incubating-src.tar.gz&#34;&gt;tar.gz&lt;/a&gt;&lt;/td&gt;
            &lt;td&gt;&lt;a href=&#34;https://downloads.apache.org/incubator/brpc/1.0.0/apache-brpc-1.0.0-incubating-src.tar.gz.sha512&#34;&gt;SHA-512&lt;/a&gt;&lt;/td&gt;
            &lt;td&gt;&lt;a href=&#34;https://downloads.apache.org/incubator/brpc/1.0.0/apache-brpc-1.0.0-incubating-src.tar.gz.asc&#34;&gt;ASC&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;!--tr&gt;
            &lt;td&gt;Release Notes&lt;/td&gt;
            &lt;td&gt;&lt;a href=&#34;https://brpc.incubator.apache.org/releases/spark/{{ site.data.project.latest_release }}/release-notes&#34;&gt;{{ site.data.project.latest_release }}&lt;/a&gt;&lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
        &lt;/tr--&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Choose a source distribution in either &lt;em&gt;tar&lt;/em&gt; or &lt;em&gt;zip&lt;/em&gt; format,
and &lt;a href=&#34;https://www.apache.org/dyn/closer.cgi#verify&#34;&gt;verify&lt;/a&gt;
using the corresponding &lt;em&gt;pgp&lt;/em&gt; signature (using the committer file in
&lt;a href=&#34;https://downloads.apache.org/incubator/brpc/KEYS&#34;&gt;KEYS&lt;/a&gt;).
If you cannot do that, the &lt;em&gt;md5&lt;/em&gt; hash file may be used to check that the
download has completed OK.&lt;/p&gt;
&lt;p&gt;For fast downloads, current source distributions are hosted on mirror servers;
older source distributions are in the
&lt;a href=&#34;https://archive.apache.org/dist/incubator/brpc/&#34;&gt;archive&lt;/a&gt;.
If a download from a mirror fails, retry, and the second download will likely
succeed.&lt;/p&gt;
&lt;p&gt;For security, hash and signature files are always hosted at
&lt;a href=&#34;https://www.apache.org&#34;&gt;Apache&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: FAQ</title>
      <link>https://brpc.incubator.apache.org/docs/faq/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/faq/</guid>
      <description>
        
        
        &lt;p&gt;See &lt;a href=&#34;https://github.com/apache/incubator-brpc/issues&#34;&gt;https://github.com/apache/incubator-brpc/issues&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Users</title>
      <link>https://brpc.incubator.apache.org/docs/users/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/users/</guid>
      <description>
        
        
        &lt;div id=&#34;overview&#34;&gt;
  &lt;div class=&#34;contain&#34; style=&#34;width: auto; margin: 0 auto&#34;&gt;
    &lt;h2 class=&#34;section-head&#34;&gt;Used by&lt;/h2&gt;
    &lt;h3&gt;Providing your info on &lt;a href=&#34;https://github.com/apache/incubator-brpc/issues/1640&#34;&gt;Wanted: who’s using bRPC&lt;/a&gt; to help improving bRPC better&lt;/h3&gt;
    &lt;td align=&#34;center&#34;  valign=&#34;middle&#34;&gt;
      &lt;a href=&#34;http://home.baidu.com/index.html&#34; target=&#34;_blank&#34;&gt;
        &lt;img width=&#34;222px&#34; style=&#34;margin: 0 10px;&#34; src=&#34;https://brpc.incubator.apache.org/images/community/baidu_logo.svg&#34;&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
      &lt;a href=&#34;https://www.iqiyi.com&#34; target=&#34;_blank&#34;&gt;
        &lt;img width=&#34;222px&#34; style=&#34;margin: 0 10px;&#34; src=&#34;https://brpc.incubator.apache.org/images/community/iqiyi_logo.png&#34;&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
      &lt;a href=&#34;https://bytedance.com/zh/&#34; target=&#34;_blank&#34;&gt;
        &lt;img width=&#34;222px&#34; style=&#34;margin: 0 10px;&#34; src=&#34;https://brpc.incubator.apache.org/images/community/bytedance_logo.svg&#34;&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
      &lt;a href=&#34;https://www.bilibili.com/&#34; target=&#34;_blank&#34;&gt;
        &lt;img width=&#34;222px&#34; style=&#34;margin: 0 10px;&#34; src=&#34;https://brpc.incubator.apache.org/images/community/bilibili_logo.png&#34;&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
      &lt;a href=&#34;https://bigo.tv/&#34; target=&#34;_blank&#34;&gt;
        &lt;img width=&#34;222px&#34; style=&#34;margin: 0 10px;&#34; src=&#34;https://brpc.incubator.apache.org/images/community/bigo_logo.png&#34;&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
      &lt;a href=&#34;https://www.didiglobal.com/&#34; target=&#34;_blank&#34;&gt;
        &lt;img width=&#34;222px&#34; style=&#34;margin: 0 10px;&#34; src=&#34;https://brpc.incubator.apache.org/images/community/didi_logo.png&#34;&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
      &lt;a href=&#34;https://www.capitalonline.net/&#34; target=&#34;_blank&#34;&gt;
        &lt;img width=&#34;222px&#34; style=&#34;margin: 0 10px;&#34; src=&#34;https://brpc.incubator.apache.org/images/community/cdsshouyun_logo.png&#34;&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
      &lt;a href=&#34;https://www.amap.com/&#34; target=&#34;_blank&#34;&gt;
        &lt;img width=&#34;222px&#34; style=&#34;margin: 0 10px;&#34; src=&#34;https://brpc.incubator.apache.org/images/community/gaode_logo.png&#34;&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
      &lt;a href=&#34;https://www.weibo.com&#34; target=&#34;_blank&#34;&gt;
        &lt;img width=&#34;222px&#34; style=&#34;margin: 0 10px;&#34; src=&#34;https://brpc.incubator.apache.org/images/community/weibo_logo.svg&#34;&gt;
      &lt;/a&gt;
    &lt;/td&gt;
  &lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
