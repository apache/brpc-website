<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bRPC – 工具</title>
    <link>https://brpc.incubator.apache.org/zh/docs/tools/</link>
    <description>Recent content in 工具 on bRPC</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 12 Aug 2021 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://brpc.incubator.apache.org/zh/docs/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: rpc_press</title>
      <link>https://brpc.incubator.apache.org/zh/docs/tools/rpc_press/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/zh/docs/tools/rpc_press/</guid>
      <description>
        
        
        &lt;p&gt;rpc_press无需写代码就压测各种rpc server，目前支持的协议有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;baidu_std&lt;/li&gt;
&lt;li&gt;hulu-pbrpc&lt;/li&gt;
&lt;li&gt;sofa-pbrpc&lt;/li&gt;
&lt;li&gt;public_pbrpc&lt;/li&gt;
&lt;li&gt;nova_pbrpc&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;获取工具&#34;&gt;获取工具&lt;/h1&gt;
&lt;p&gt;先按照&lt;a href=&#34;../../getting_started/&#34;&gt;Getting Started&lt;/a&gt;编译好brpc，再去tools/rpc_press编译。&lt;/p&gt;
&lt;p&gt;在CentOS 6.3上如果出现找不到libssl.so.4的错误，可执行&lt;code&gt;ln -s /usr/lib64/libssl.so.6 libssl.so.4临时解决&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;发压力&#34;&gt;发压力&lt;/h1&gt;
&lt;p&gt;rpc_press会动态加载proto文件，无需把proto文件编译为c++源文件。rpc_press会加载json格式的输入文件，转为pb请求，发向server，收到pb回复后如有需要会转为json并写入用户指定的文件。&lt;/p&gt;
&lt;p&gt;rpc_press的所有的选项都来自命令行参数，而不是配置文件.&lt;/p&gt;
&lt;p&gt;如下的命令向下游0.0.0.0:8002用baidu_std重复发送两个pb请求，分别转自&#39;{&amp;ldquo;message&amp;rdquo;:&amp;ldquo;hello&amp;rdquo;}和&#39;{&amp;ldquo;message&amp;rdquo;:&amp;ldquo;world&amp;rdquo;}，持续压力直到按ctrl-c，qps为100。&lt;/p&gt;
&lt;p&gt;json也可以写在文件中，假如./input.json包含了上述两个请求，-input=./input.json也是可以的。&lt;/p&gt;
&lt;p&gt;必需参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-proto：指定相关的proto文件名。&lt;/li&gt;
&lt;li&gt;-method：指定方法名，形式必须是package.service.method。&lt;/li&gt;
&lt;li&gt;-server：当-lb_policy为空时，是服务器的ip:port；当-lb_policy不为空时，是集群地址，比如bns://node-name, file://server_list等等。具体见&lt;a href=&#34;../../client/basics/#%E5%91%BD%E5%90%8D%E6%9C%8D%E5%8A%A1&#34;&gt;命名服务&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;-input: 指定json请求或包含json请求的文件。r32157后json间不需要分隔符，r32157前json间用分号分隔。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可选参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-inc: 包含被import的proto文件的路径。rpc_press默认支持import目录下的其他proto文件，但如果proto文件在其他目录，就要通过这个参数指定，多个路径用分号(;)分隔。&lt;/li&gt;
&lt;li&gt;-lb_policy: 指定负载均衡算法，默认为空，可选项为: rr random la c_murmurhash c_md5，具体见&lt;a href=&#34;../../client/basics/#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1&#34;&gt;负载均衡&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;-timeout_ms: 设定超时,单位是毫秒(milliseconds),默认是1000(1秒)&lt;/li&gt;
&lt;li&gt;-max_retry: 最大的重试次数,默认是3, 一般无需修改. brpc的重试行为具体请见&lt;a href=&#34;../../client/basics/#%E9%87%8D%E8%AF%95&#34;&gt;这里&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;-protocol: 连接server使用的协议，可选项见&lt;a href=&#34;../../client/basics/#%E5%8D%8F%E8%AE%AE&#34;&gt;协议&lt;/a&gt;, 默认是baidu_std&lt;/li&gt;
&lt;li&gt;-connection_type: 连接方式，可选项为: single pooled short，具体见&lt;a href=&#34;../../client/basics/#%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F&#34;&gt;连接方式&lt;/a&gt;。默认会根据协议自动选择,无需指定.&lt;/li&gt;
&lt;li&gt;-output: 如果不为空，response会转为json并写入这个文件，默认为空。&lt;/li&gt;
&lt;li&gt;-duration：大于0时表示发送这么多秒的压力后退出，否则一直发直到按ctrl-c或进程被杀死。默认是0（一直发送）。&lt;/li&gt;
&lt;li&gt;-qps：大于0时表示以这个压力发送，否则以最大速度(自适应)发送。默认是100。&lt;/li&gt;
&lt;li&gt;-dummy_port：修改dummy_server的端口，默认是8888&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用的参数组合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向下游0.0.0.0:8002、用baidu_std重复发送./input.json中的所有请求，持续压力直到按ctrl-c，qps为100。
./rpc_press -proto=echo.proto -method=example.EchoService.Echo -server=0.0.0.0:8002 -input=./input.json -qps=100&lt;/li&gt;
&lt;li&gt;以round-robin分流算法向bns://node-name代表的所有下游机器、用baidu_std重复发送两个pb请求，持续压力直到按ctrl-c，qps为100。
./rpc_press -proto=echo.proto -method=example.EchoService.Echo -server=bns://node-name -lb_policy=rr -input=&#39;{&amp;ldquo;message&amp;rdquo;:&amp;ldquo;hello&amp;rdquo;} {&amp;ldquo;message&amp;rdquo;:&amp;ldquo;world&amp;rdquo;}&#39; -qps=100&lt;/li&gt;
&lt;li&gt;向下游0.0.0.0:8002、用hulu协议重复发送两个pb请求，持续压力直到按ctrl-c，qps为100。
./rpc_press -proto=echo.proto -method=example.EchoService.Echo -server=0.0.0.0:8002 -protocol=hulu_pbrpc -input=&#39;{&amp;ldquo;message&amp;rdquo;:&amp;ldquo;hello&amp;rdquo;} {&amp;ldquo;message&amp;rdquo;:&amp;ldquo;world&amp;rdquo;}&#39; -qps=100&lt;/li&gt;
&lt;li&gt;向下游0.0.0.0:8002、用baidu_std重复发送两个pb请求，持续最大压力直到按ctrl-c。
./rpc_press -proto=echo.proto -method=example.EchoService.Echo -server=0.0.0.0:8002 -input=&#39;{&amp;ldquo;message&amp;rdquo;:&amp;ldquo;hello&amp;rdquo;} {&amp;ldquo;message&amp;rdquo;:&amp;ldquo;world&amp;rdquo;}&#39; -qps=0&lt;/li&gt;
&lt;li&gt;向下游0.0.0.0:8002、用baidu_std重复发送两个pb请求，持续最大压力10秒钟。
./rpc_press -proto=echo.proto -method=example.EchoService.Echo -server=0.0.0.0:8002 -input=&#39;{&amp;ldquo;message&amp;rdquo;:&amp;ldquo;hello&amp;rdquo;} {&amp;ldquo;message&amp;rdquo;:&amp;ldquo;world&amp;rdquo;}&#39; -qps=0 -duration=10&lt;/li&gt;
&lt;li&gt;echo.proto中import了另一个目录下的proto文件
./rpc_press -proto=echo.proto -inc=&lt;another-dir-with-the-imported-proto&gt; -method=example.EchoService.Echo -server=0.0.0.0:8002 -input=&#39;{&amp;ldquo;message&amp;rdquo;:&amp;ldquo;hello&amp;rdquo;} {&amp;ldquo;message&amp;rdquo;:&amp;ldquo;world&amp;rdquo;}&#39; -qps=0 -duration=10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rpc_press启动后会默认在8888端口启动一个dummy server，用于观察rpc_press本身的运行情况：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./rpc_press -proto=echo.proto -service=example.EchoService -method=Echo -server=0.0.0.0:8002 -input=./input.json -duration=0 -qps=100
TRACE: 01-30 16:10:04:   * 0 src/brpc/server.cpp:733] Server[dummy_servers] is serving on port=8888.
TRACE: 01-30 16:10:04:   * 0 src/brpc/server.cpp:742] Check out http://xxx.com:8888 in your web browser.&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dummy_server启动时会在终端打印日志，一般按住ctrl点击那个链接可以直接打开对应的内置服务页面，就像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/rpc_press_1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;切换到vars页面，在Search框中输入rpc_press可以看到当前压力的延时分布情况:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/rpc_press_2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以通过-dummy_port参数修改dummy_server的端口，请确保端口可以在浏览器中访问。&lt;/p&gt;
&lt;p&gt;如果你无法打开浏览器，命令行中也会定期打印信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2016/01/30-16:19:01     sent:101       success:101       error:0         total_error:0         total_sent:28379     
2016/01/30-16:19:02     sent:101       success:101       error:0         total_error:0         total_sent:28480     
2016/01/30-16:19:03     sent:101       success:101       error:0         total_error:0         total_sent:28581     
2016/01/30-16:19:04     sent:101       success:101       error:0         total_error:0         total_sent:28682     
2016/01/30-16:19:05     sent:101       success:101       error:0         total_error:0         total_sent:28783     
2016/01/30-16:19:06     sent:101       success:101       error:0         total_error:0         total_sent:28884     
2016/01/30-16:19:07     sent:101       success:101       error:0         total_error:0         total_sent:28985     
2016/01/30-16:19:08     sent:101       success:101       error:0         total_error:0         total_sent:29086     
2016/01/30-16:19:09     sent:101       success:101       error:0         total_error:0         total_sent:29187     
2016/01/30-16:19:10     sent:101       success:101       error:0         total_error:0         total_sent:29288     
[Latency]
  avg            122 us
  50%            122 us
  70%            135 us
  90%            161 us
  95%            164 us
  97%            166 us
  99%            172 us
  99.9%          199 us
  99.99%         199 us
  max            199 us
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上方的字段含义应该是自解释的，在此略过。下方是延时信息，第一项&amp;quot;avg&amp;quot;是10秒内的平均延时，最后一项&amp;quot;max&amp;quot;是10秒内的最大延时，其余以百分号结尾的则代表延时分位值，即有左侧这么多比例的请求延时小于右侧的延时（单位微秒）。一般性能测试需要关注99%之后的长尾区域。&lt;/p&gt;
&lt;h1 id=&#34;faq&#34;&gt;FAQ&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Q: 如果下游是基于j-protobuf框架的服务模块，压力工具该如何配置？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：因为协议兼容性问题，启动rpc_press的时候需要带上-baidu_protocol_use_fullname=false&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: rpc_replay</title>
      <link>https://brpc.incubator.apache.org/zh/docs/tools/rpc_replay/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/zh/docs/tools/rpc_replay/</guid>
      <description>
        
        
        &lt;p&gt;r31658后，brpc能随机地把一部分请求写入一些文件中，并通过rpc_replay工具回放。目前支持的协议有：baidu_std, hulu_pbrpc, sofa_pbrpc。&lt;/p&gt;
&lt;h1 id=&#34;获取工具&#34;&gt;获取工具&lt;/h1&gt;
&lt;p&gt;先按照&lt;a href=&#34;../../getting_started/&#34;&gt;Getting Started&lt;/a&gt;编译好brpc，再去tools/rpc_replay编译。&lt;/p&gt;
&lt;p&gt;在CentOS 6.3上如果出现找不到libssl.so.4的错误，可执行&lt;code&gt;ln -s /usr/lib64/libssl.so.6 libssl.so.4临时解决&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;采样&#34;&gt;采样&lt;/h1&gt;
&lt;p&gt;brpc通过如下flags打开和控制如何保存请求，包含(R)后缀的flag都可以动态设置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/rpc_replay_1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/rpc_replay_2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-rpc_dump是主开关，关闭时其他以rpc_dump开头的flag都无效。当打开-rpc_dump后，brpc会以一定概率采集请求，如果服务的qps很高，brpc会调节采样比例，使得每秒钟采样的请求个数不超过-bvar_collector_expected_per_second对应的值。这个值在目前同样影响rpcz和contention profiler，一般不用改动，以后会对不同的应用独立开来。&lt;/li&gt;
&lt;li&gt;-rpc_dump_dir：设置存放被dump请求的目录&lt;/li&gt;
&lt;li&gt;-rpc_dump_max_files: 设置目录下的最大文件数，当超过限制时，老文件会被删除以腾出空间。&lt;/li&gt;
&lt;li&gt;-rpc_dump_max_requests_in_one_file：一个文件内的最大请求数，超过后写新文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;brpc通过一个&lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/bvar/collector.h&#34;&gt;bvar::Collector&lt;/a&gt;来汇总来自不同线程的被采样请求，不同线程之间没有竞争，开销很小。&lt;/p&gt;
&lt;p&gt;写出的内容依次存放在rpc_dump_dir目录下的多个文件内，这个目录默认在./rpc_dump_&lt;app&gt;，其中&lt;app&gt;是程序名。不同程序在同一个目录下同时采样时会写入不同的目录。如果程序启动时rpc_dump_dir已经存在了，目录将被清空。目录中的每个文件以requests.yyyymmdd_hhmmss_uuuuus命名，以保证按时间有序方便查找，比如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/rpc_replay_3.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;目录下的文件数不超过rpc_dump_max_files，超过后最老的文件被删除从而给新文件腾出位置。&lt;/p&gt;
&lt;p&gt;文件是二进制格式，格式与baidu_std协议的二进制格式类似，每个请求的binary layout如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;PRPC&amp;quot; (4 bytes magic string)
body_size(4 bytes)
meta_size(4 bytes)
RpcDumpMeta (meta_size bytes)
serialized request (body_size - meta_size bytes, including attachment)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请求间紧密排列。一个文件内的请求数不超过rpc_dump_max_requests_in_one_file。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个文件可能包含多种协议的请求，如果server被多种协议访问的话。回放时被请求的server也将收到不同协议的请求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;brpc提供了&lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/rpc_dump.h&#34;&gt;SampleIterator&lt;/a&gt;从一个采样目录下的所有文件中依次读取所有的被采样请求，用户可根据需求把serialized request反序列化为protobuf请求，做一些二次开发。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;brpc/rpc_dump.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;brpc&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SampleIterator&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;it&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;./rpc_data/rpc_dump/echo_server&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;         
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;brpc&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SampledRequest&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;it&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Next&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;it&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Next&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;                    
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// req-&amp;gt;meta的类型是brpc::RpcDumpMeta，定义在src/brpc/rpc_dump.proto
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// req-&amp;gt;request的类型是butil::IOBuf，对应格式说明中的&amp;#34;serialized request&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 使用结束后必须delete req。
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;回放&#34;&gt;回放&lt;/h1&gt;
&lt;p&gt;brpc在&lt;a href=&#34;https://github.com/brpc/brpc/tree/master/tools/rpc_replay/&#34;&gt;tools/rpc_replay&lt;/a&gt;提供了默认的回放工具。运行方式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/rpc_replay_4.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;主要参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-dir指定了存放采样文件的目录&lt;/li&gt;
&lt;li&gt;-times指定循环回放次数。其他参数请加上&amp;ndash;help运行查看。&lt;/li&gt;
&lt;li&gt;-connection_type： 连接server的方式&lt;/li&gt;
&lt;li&gt;-dummy_port：修改dummy_server的端口&lt;/li&gt;
&lt;li&gt;-max_retry：最大重试次数，默认3次。&lt;/li&gt;
&lt;li&gt;-qps：大于0时限制qps，默认为0（不限制）&lt;/li&gt;
&lt;li&gt;-server：server的地址&lt;/li&gt;
&lt;li&gt;-thread_num：发送线程数，为0时会根据qps自动调节，默认为0。一般不用设置。&lt;/li&gt;
&lt;li&gt;-timeout_ms：超时&lt;/li&gt;
&lt;li&gt;-use_bthread：使用bthread发送，默认是。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rpc_replay会默认启动一个仅监控用的dummy server。打开后可查看回放的状况。其中rpc_replay_error是回放失败的次数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/rpc_replay_5.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你无法打开浏览器，命令行中也会定期打印信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2016/01/30-16:19:01     sent:101       success:101       error:0         total_error:0         total_sent:28379     
2016/01/30-16:19:02     sent:101       success:101       error:0         total_error:0         total_sent:28480     
2016/01/30-16:19:03     sent:101       success:101       error:0         total_error:0         total_sent:28581     
2016/01/30-16:19:04     sent:101       success:101       error:0         total_error:0         total_sent:28682     
2016/01/30-16:19:05     sent:101       success:101       error:0         total_error:0         total_sent:28783     
2016/01/30-16:19:06     sent:101       success:101       error:0         total_error:0         total_sent:28884     
2016/01/30-16:19:07     sent:101       success:101       error:0         total_error:0         total_sent:28985     
2016/01/30-16:19:08     sent:101       success:101       error:0         total_error:0         total_sent:29086     
2016/01/30-16:19:09     sent:101       success:101       error:0         total_error:0         total_sent:29187     
2016/01/30-16:19:10     sent:101       success:101       error:0         total_error:0         total_sent:29288     
[Latency]
  avg            122 us
  50%            122 us
  70%            135 us
  90%            161 us
  95%            164 us
  97%            166 us
  99%            172 us
  99.9%          199 us
  99.99%         199 us
  max            199 us
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上方的字段含义应该是自解释的，在此略过。下方是延时信息，第一项&amp;quot;avg&amp;quot;是10秒内的平均延时，最后一项&amp;quot;max&amp;quot;是10秒内的最大延时，其余以百分号结尾的则代表延时分位值，即有左侧这么多比例的请求延时小于右侧的延时（单位微秒）。性能测试需要关注99%之后的长尾区域。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: rpc_view</title>
      <link>https://brpc.incubator.apache.org/zh/docs/tools/rpc_view/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/zh/docs/tools/rpc_view/</guid>
      <description>
        
        
        &lt;p&gt;rpc_view可以转发端口被限的server的内置服务。像百度内如果一个服务的端口不在8000-8999，就只能在命令行下使用curl查看它的内置服务，没有历史趋势和动态曲线，也无法点击链接，排查问题不方便。rpc_view是一个特殊的http proxy：把对它的所有访问都转为对目标server的访问。只要把rpc_view的端口能在浏览器中被访问，我们就能通过它看到原本不能直接看到的server了。&lt;/p&gt;
&lt;h1 id=&#34;获取工具&#34;&gt;获取工具&lt;/h1&gt;
&lt;p&gt;先按照&lt;a href=&#34;../../getting_started/&#34;&gt;Getting Started&lt;/a&gt;编译好brpc，再去tools/rpc_view编译。&lt;/p&gt;
&lt;p&gt;在CentOS 6.3上如果出现找不到libssl.so.4的错误，可执行&lt;code&gt;ln -s /usr/lib64/libssl.so.6 libssl.so.4临时解决&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;访问目标server&#34;&gt;访问目标server&lt;/h1&gt;
&lt;p&gt;确保你的机器能访问目标server，开发机应该都可以，一些测试机可能不行。运行./rpc_view &lt;server-address&gt;就可以了。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./rpc_view 10.46.130.53:9970
TRACE: 02-14 12:12:20:   * 0 src/brpc/server.cpp:762] Server[rpc_view_server] is serving on port=8888.
TRACE: 02-14 12:12:20:   * 0 src/brpc/server.cpp:771] Check out http://XXX.com:8888 in web browser.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打开rpc_view在8888端口提供的页面（在secureCRT中按住ctrl点url）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/rpc_view_1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个页面正是目标server的内置服务，右下角的提示告诉我们这是rpc_view提供的。这个页面和真实的内置服务基本是一样的，你可以做任何操作。&lt;/p&gt;
&lt;h1 id=&#34;更换目标server&#34;&gt;更换目标server&lt;/h1&gt;
&lt;p&gt;你可以随时停掉rpc_view并更换目标server，不过你觉得麻烦的话，也可以在浏览器上操作：给url加上?changetarget=&lt;new-server-address&gt;就行了。&lt;/p&gt;
&lt;p&gt;假如我们之前停留在原目标server的/connections页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/rpc_view_2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;加上?changetarge后就跳到新目标server的/connections页面了。接下来点击其他tab都会显示新目标server的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://brpc.incubator.apache.org/images/docs/rpc_view_3.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: benchmark_http</title>
      <link>https://brpc.incubator.apache.org/zh/docs/tools/benchmark_http/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/zh/docs/tools/benchmark_http/</guid>
      <description>
        
        
        &lt;p&gt;可代替&lt;a href=&#34;https://httpd.apache.org/docs/2.2/programs/ab.html&#34;&gt;ab&lt;/a&gt;测试http server极限性能。ab功能较多但年代久远，有时本身可能会成为瓶颈。benchmark_http基本上就是一个brpc http client，性能很高，功能较少，一般压测够用了。&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;p&gt;首先你得&lt;a href=&#34;../../getting_started/&#34;&gt;下载和编译&lt;/a&gt;了brpc源码，然后去example/http_c++目录编译，成功后应该能看到benchmark_http。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: parallel_http</title>
      <link>https://brpc.incubator.apache.org/zh/docs/tools/parallel_http/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/zh/docs/tools/parallel_http/</guid>
      <description>
        
        
        &lt;p&gt;parallel_http能同时访问大量的http服务（几万个），适合在命令行中查询线上所有server的内置信息，供其他工具进一步过滤和聚合。curl很难做到这点，即使多个curl以后台的方式运行，并行度一般也只有百左右，访问几万台机器需要等待极长的时间。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
